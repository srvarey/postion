/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 all√©e Paul Barillon
 * - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.assets;

import com.toedter.calendar.JSpinnerDateEditor;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.legalEntity.LegalEntityAccessor;
import org.gaia.dao.observables.MarketDataSourceUtils;
import org.gaia.dao.observables.MarketQuoteAccessor;
import org.gaia.dao.pricing.DayCountAccessor;
import org.gaia.dao.referentials.CountryAccessor;
import org.gaia.dao.referentials.CurrencyAccessor;
import org.gaia.dao.referentials.FrequencyUtil;
import org.gaia.dao.referentials.LoggedUser;
import org.gaia.dao.referentials.UserAccessor;
import org.gaia.dao.trades.ProductAccessor;
import org.gaia.dao.trades.ProductTypeUtil;
import org.gaia.dao.utils.DateUtils;
import org.gaia.domain.legalEntity.LegalEntity;
import org.gaia.domain.observables.MarketDataCode;
import org.gaia.domain.trades.Product;
import org.gaia.domain.trades.ProductCredit;
import org.gaia.domain.trades.ProductRate;
import org.gaia.domain.trades.ProductReference;
import org.gaia.domain.trades.Scheduler;
import org.gaia.domain.trades.Trade;
import org.gaia.domain.utils.StringUtils;
import org.gaia.gui.common.GaiaProductTopComponent;
import org.gaia.gui.common.MenuManager;
import org.gaia.gui.common.ProductMarketDataCodesPanel;
import org.gaia.gui.common.ProductReferencesPanel;
import org.gaia.gui.utils.AmountShortCut;
import org.gaia.gui.utils.DateShortCut;
import org.gaia.gui.utils.GUIUtils;
import org.gaia.gui.utils.GaiaJSpinnerDateEditor;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays bonds.
 */
@ConvertAsProperties(dtd = "-//org.gaia.gui.assets//Bonds//EN", autostore = false)
@TopComponent.Description(preferredID = "BondsTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.gaia.gui.assets.BondsTopComponent")
@ActionReference(path = "Menu"+MenuManager.BondsTopComponentMenu, position = MenuManager.BondsTopComponent)
@TopComponent.OpenActionRegistration(displayName = "#CTL_BondsAction")
@Messages({"CTL_BondsAction=Bonds", "CTL_BondsTopComponent=Bonds", "HINT_BondsTopComponent=This is Bonds window"})
public final class BondsTopComponent extends GaiaProductTopComponent {

    private static final Logger logger = Logger.getLogger(BondsTopComponent.class);
    private AssetFinder assetFinder = null;

    public BondsTopComponent() {
        initComponents();
        setName(Bundle.CTL_BondsTopComponent());
        setToolTipText(Bundle.HINT_BondsTopComponent());
        setProductReferences(new ArrayList());
        buttonGroup1.add(jRadioButtonFixed);
        buttonGroup1.add(jRadioButtonFloating);
        jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    }

    public BondsTopComponent(Integer productId) {
        this();
        load(productId);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel18 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldLongName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldShortName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxCurrency = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxQuotationType = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jFormattedTextFieldMinAmount = new javax.swing.JFormattedTextField(decimalFormat);
        jLabel7 = new javax.swing.JLabel();
        jFormattedTextFieldSettlementDelay = new javax.swing.JFormattedTextField(new DecimalFormat("#"));
        jLabel8 = new javax.swing.JLabel();
        jFormattedTextFieldIssuedAmount = new javax.swing.JFormattedTextField(longFormat);
        jComboBoxIssuer = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxCountry = new javax.swing.JComboBox();
        jButtonShowReferences = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaComment = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        jButtonClose = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        jTextFieldFloatingRate = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jFormattedTextFieldRate = new javax.swing.JFormattedTextField(decimalFormat);
        jButton2 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jFormattedTextFieldNotional = new javax.swing.JFormattedTextField(decimalFormat);
        jLabelUnderlyingId = new javax.swing.JLabel();
        jRadioButtonFixed = new javax.swing.JRadioButton();
        jRadioButtonFloating = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jFormattedTextFieldSpread = new javax.swing.JFormattedTextField(decimalFormat);
        jLabel22 = new javax.swing.JLabel();
        jComboBoxFrequency = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        jComboBoxDayCount = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        jComboBoxAdjustment = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jFormattedTextFieldPayLag = new javax.swing.JFormattedTextField(integerFormat);
        jLabel28 = new javax.swing.JLabel();
        jFormattedTextFieldResetLag = new javax.swing.JFormattedTextField(integerFormat);
        jCheckBoxPayInArrears = new javax.swing.JCheckBox();
        jCheckBoxResetInArrears = new javax.swing.JCheckBox();
        jCheckBoxPayBusDays = new javax.swing.JCheckBox();
        jCheckBoxResetBusLag = new javax.swing.JCheckBox();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jFormattedTextFieldRepayPrice = new javax.swing.JFormattedTextField(decimalFormat);
        jLabel34 = new javax.swing.JLabel();
        jFormattedTextFieldIssuePrice = new javax.swing.JFormattedTextField(decimalFormat);
        jLabel35 = new javax.swing.JLabel();
        jComboBoxSeniority = new javax.swing.JComboBox();
        jButtonSchedule = new javax.swing.JButton();
        jButtonSaveAsNew = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jDateChooserPenultimateDate = new com.toedter.calendar.JDateChooser(null,null,dateFormat,new GaiaJSpinnerDateEditor());
        jDateChooserfirstCouponDate = new com.toedter.calendar.JDateChooser(null,null,dateFormat,new GaiaJSpinnerDateEditor());
        jDateChooserIssueDate = new com.toedter.calendar.JDateChooser(null,null,dateFormat,new GaiaJSpinnerDateEditor());
        jDateChooserdMaturity = new com.toedter.calendar.JDateChooser(null,null,dateFormat,new GaiaJSpinnerDateEditor());
        jTextFieldId = new javax.swing.JTextField();
        compoundedCheckBox = new javax.swing.JCheckBox();
        compoundedFrequency = new javax.swing.JComboBox();
        loadEventXButton = new org.jdesktop.swingx.JXButton();
        jLabel12 = new javax.swing.JLabel();
        jComboBoxIssuerType = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel18, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel18.text")); // NOI18N

        jPanel1.setBackground(new java.awt.Color(254, 252, 254));
        jPanel1.setPreferredSize(new java.awt.Dimension(746, 900));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel1.text")); // NOI18N

        jTextFieldLongName.setName("jTextFieldLongName"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel2.text")); // NOI18N

        jTextFieldShortName.setName("jTextFieldShortName"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel3.text")); // NOI18N

        jComboBoxType.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxType.setName("jComboBoxType"); // NOI18N
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel4.text")); // NOI18N

        jComboBoxCurrency.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxCurrency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxCurrency.setName("jComboBoxCurrency"); // NOI18N
        jComboBoxCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCurrencyActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel5.text")); // NOI18N

        jComboBoxQuotationType.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxQuotationType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxQuotationType.setName("jComboBoxQuotationType"); // NOI18N
        jComboBoxQuotationType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxQuotationTypeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel6.text")); // NOI18N

        jFormattedTextFieldMinAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldMinAmount.setName("jFormattedTextFieldMinAmount"); // NOI18N
        jFormattedTextFieldMinAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldMinAmountActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel7.text")); // NOI18N

        jFormattedTextFieldSettlementDelay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldSettlementDelay.setName("jFormattedTextFieldSettlementDelay"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel8.text")); // NOI18N

        jFormattedTextFieldIssuedAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldIssuedAmount.setName("jFormattedTextFieldIssuedAmount"); // NOI18N

        jComboBoxIssuer.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxIssuer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxIssuer.setName("jComboBoxIssuer"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel9.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel10.text")); // NOI18N

        jComboBoxCountry.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxCountry.setName("jComboBoxCountry"); // NOI18N

        jButtonShowReferences.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonShowReferences, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonShowReferences.text")); // NOI18N
        jButtonShowReferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowReferencesActionPerformed(evt);
            }
        });

        jButtonSave.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jTextAreaComment.setColumns(20);
        jTextAreaComment.setRows(5);
        jScrollPane1.setViewportView(jTextAreaComment);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel19, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel19.text")); // NOI18N

        jButtonClose.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonClose, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonClose.text")); // NOI18N
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonLoad.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonLoad, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonLoad.text")); // NOI18N
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jButtonNew.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonNew, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonNew.text")); // NOI18N
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jTextFieldFloatingRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldFloatingRate.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel13.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel15.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel16.text")); // NOI18N

        jFormattedTextFieldRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldRate.setName("jFormattedTextFieldRate"); // NOI18N

        jButton2.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel17, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel17.text")); // NOI18N

        jFormattedTextFieldNotional.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldNotional.setName("jFormattedTextFieldNotional"); // NOI18N

        jLabelUnderlyingId.setBackground(new java.awt.Color(254, 252, 254));
        jLabelUnderlyingId.setOpaque(true);

        jRadioButtonFixed.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButtonFixed, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jRadioButtonFixed.text")); // NOI18N
        jRadioButtonFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFixedActionPerformed(evt);
            }
        });

        jRadioButtonFloating.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jRadioButtonFloating, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jRadioButtonFloating.text")); // NOI18N
        jRadioButtonFloating.setName("jRadioButtonFloating"); // NOI18N
        jRadioButtonFloating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFloatingActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel11.text")); // NOI18N

        jFormattedTextFieldSpread.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldSpread.setName("jFormattedTextFieldSpread"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel22, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel22.text")); // NOI18N

        jComboBoxFrequency.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxFrequency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxFrequency.setName("jComboBoxFrequency"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel23, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel23.text")); // NOI18N

        jComboBoxDayCount.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxDayCount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxDayCount.setName("jComboBoxDayCount"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel24, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel24.text")); // NOI18N

        jComboBoxAdjustment.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxAdjustment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxAdjustment.setName("jComboBoxAdjustment"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel25, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel25.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel26, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel26.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel27, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel27.text")); // NOI18N

        jFormattedTextFieldPayLag.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldPayLag.setName("jFormattedTextFieldPayLag"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel28, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel28.text")); // NOI18N

        jFormattedTextFieldResetLag.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldResetLag.setName("jFormattedTextFieldResetLag."); // NOI18N

        jCheckBoxPayInArrears.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxPayInArrears, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jCheckBoxPayInArrears.text")); // NOI18N

        jCheckBoxResetInArrears.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxResetInArrears, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jCheckBoxResetInArrears.text")); // NOI18N

        jCheckBoxPayBusDays.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxPayBusDays, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jCheckBoxPayBusDays.text")); // NOI18N

        jCheckBoxResetBusLag.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxResetBusLag, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jCheckBoxResetBusLag.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel30, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel30.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel31, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel31.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel32, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel32.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel33, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel33.text")); // NOI18N

        jFormattedTextFieldRepayPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldRepayPrice.setName("jFormattedTextFieldRepayPrice"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel34, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel34.text")); // NOI18N

        jFormattedTextFieldIssuePrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFormattedTextFieldIssuePrice.setName("jFormattedTextFieldIssuePrice"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel35, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel35.text")); // NOI18N

        jComboBoxSeniority.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxSeniority.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxSeniority.setName("jComboBoxSeniority"); // NOI18N

        jButtonSchedule.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSchedule, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonSchedule.text")); // NOI18N
        jButtonSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScheduleActionPerformed(evt);
            }
        });

        jButtonSaveAsNew.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSaveAsNew, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonSaveAsNew.text")); // NOI18N
        jButtonSaveAsNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAsNewActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDelete, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jButtonDelete.text")); // NOI18N
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jDateChooserPenultimateDate.setBackground(new java.awt.Color(254, 252, 254));

        jDateChooserfirstCouponDate.setBackground(new java.awt.Color(254, 252, 254));

        jDateChooserIssueDate.setBackground(new java.awt.Color(254, 252, 254));

        jDateChooserdMaturity.setBackground(new java.awt.Color(254, 252, 254));
        jDateChooserdMaturity.setName("jDateChooserdMaturity"); // NOI18N

        jTextFieldId.setEditable(false);
        jTextFieldId.setText(org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jTextFieldId.text")); // NOI18N
        jTextFieldId.setName("jTextFieldId"); // NOI18N

        compoundedCheckBox.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(compoundedCheckBox, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.compoundedCheckBox.text")); // NOI18N
        compoundedCheckBox.setEnabled(false);
        compoundedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compoundedCheckBoxActionPerformed(evt);
            }
        });

        compoundedFrequency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        compoundedFrequency.setEnabled(false);

        loadEventXButton.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(loadEventXButton, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.loadEventXButton.text")); // NOI18N
        loadEventXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadEventXButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(BondsTopComponent.class, "BondsTopComponent.jLabel12.text")); // NOI18N

        jComboBoxIssuerType.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxIssuerType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Corp", "Govt" }));
        jComboBoxIssuerType.setName("jComboBoxIssuerType"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel19)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButtonFixed)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonFloating))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(compoundedCheckBox)
                                .addGap(31, 31, 31)
                                .addComponent(compoundedFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel1))
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(41, 41, 41)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxCurrency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxType, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextFieldShortName)
                                    .addComponent(jFormattedTextFieldNotional)
                                    .addComponent(jTextFieldLongName)
                                    .addComponent(jDateChooserIssueDate, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                    .addComponent(jDateChooserdMaturity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(219, 219, 219)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButtonShowReferences)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton1))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10))
                                        .addGap(189, 189, 189))
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel12)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jFormattedTextFieldSettlementDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(27, 27, 27)
                                    .addComponent(jFormattedTextFieldMinAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jFormattedTextFieldIssuedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxIssuer, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxIssuerType, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxQuotationType, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel35)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel23))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBoxFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(327, 327, 327)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel33)
                                        .addGap(52, 52, 52))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel34)
                                        .addGap(20, 20, 20)))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFormattedTextFieldIssuePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jFormattedTextFieldRepayPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jFormattedTextFieldRate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel31)
                                        .addGap(73, 73, 73))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jFormattedTextFieldSpread, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jComboBoxSeniority, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxDayCount, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxAdjustment, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTextFieldFloatingRate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(loadEventXButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel27)
                                            .addComponent(jLabel28))
                                        .addGap(22, 22, 22)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel26)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jFormattedTextFieldPayLag)
                                                    .addComponent(jFormattedTextFieldResetLag, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jCheckBoxPayBusDays)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jCheckBoxPayInArrears))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jCheckBoxResetBusLag)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jCheckBoxResetInArrears))))
                                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabelUnderlyingId, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(187, 187, 187)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateChooserfirstCouponDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDateChooserPenultimateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonSchedule)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(jButtonLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSaveAsNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClose))
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldShortName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldLongName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jFormattedTextFieldNotional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel30))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooserIssueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooserdMaturity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonFloating)
                            .addComponent(jRadioButtonFixed))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(compoundedFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compoundedCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jFormattedTextFieldRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel31))
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldFloatingRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2)
                                .addComponent(jLabel13))
                            .addComponent(jLabelUnderlyingId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFormattedTextFieldSpread, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxDayCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxAdjustment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSeniority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel19))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFormattedTextFieldMinAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jFormattedTextFieldSettlementDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jFormattedTextFieldIssuedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxIssuer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jComboBoxCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxQuotationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jComboBoxIssuerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonShowReferences)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(jFormattedTextFieldPayLag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPayBusDays)
                            .addComponent(jCheckBoxPayInArrears))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(jFormattedTextFieldResetLag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxResetBusLag)
                            .addComponent(jCheckBoxResetInArrears))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooserPenultimateDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooserfirstCouponDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFormattedTextFieldIssuePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFormattedTextFieldRepayPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadEventXButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonClose)
                    .addComponent(jButtonLoad)
                    .addComponent(jButtonNew)
                    .addComponent(jButtonSaveAsNew)
                    .addComponent(jButtonSchedule)
                    .addComponent(jButtonDelete)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabelUnderlyingId.setVisible(false);
        jTextFieldId.setVisible(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadEventXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadEventXButtonActionPerformed
        loadProductEvents();
    }//GEN-LAST:event_loadEventXButtonActionPerformed

    private void compoundedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compoundedCheckBoxActionPerformed
        if (compoundedCheckBox.isSelected()) {
            compoundedFrequency.setEnabled(true);
        } else {
            compoundedFrequency.setEnabled(false);
        }
    }//GEN-LAST:event_compoundedCheckBoxActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.DELETE_PRODUCT, getProduct());
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        /**
        * open market codes
        */
        Collection<MarketDataCode> codes = getProduct().getMarketDataCodes();
        try {
            codes.size(); // trigger the lazy initialize exception if not initialied
        } catch (Exception e) {
            try {
                codes = (Collection) DAOCallerAgent.callMethod(MarketDataSourceUtils.class, MarketDataSourceUtils.GET_MARKET_CODES, getProduct().getProductId());
            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
        ProductMarketDataCodesPanel productCodesPanel = new ProductMarketDataCodesPanel(codes);
        NotifyDescriptor notifyDescriptor = new NotifyDescriptor(productCodesPanel, "Product Market Codes", NotifyDescriptor.OK_CANCEL_OPTION, NotifyDescriptor.PLAIN_MESSAGE, null, NotifyDescriptor.OK_OPTION);

        if (DialogDisplayer.getDefault().notify(notifyDescriptor) == NotifyDescriptor.OK_OPTION) {
            getProduct().setMarketDataCodes(productCodesPanel.getMarketcodes());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonSaveAsNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAsNewActionPerformed
        /**
        * save as new
        */
        jTextFieldId.setText(StringUtils.EMPTY_STRING);
        setProduct(null);
        fillProduct();
        storeProduct();
    }//GEN-LAST:event_jButtonSaveAsNewActionPerformed

    private void jButtonScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScheduleActionPerformed
        /**
        * schedule
        */
        if (getProduct() != null && getProduct().getId() != null) {
            Trade trade_ = new Trade();
            trade_.setProduct(getProduct());
            trade_.setQuantity(BigDecimal.ONE);
            trade_.setValueDate(getProduct().getStartDate());

            ScheduleTopComponent scheduleTopComponent = new ScheduleTopComponent();
            scheduleTopComponent.setTrade(trade_);
            scheduleTopComponent.open();
            scheduleTopComponent.requestActive();

        }
    }//GEN-LAST:event_jButtonScheduleActionPerformed

    private void jRadioButtonFloatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFloatingActionPerformed

        showFloatingRateFields();

        /**
        * activ or not compounded
        */
        if (jRadioButtonFloating.isSelected()) {
            compoundedCheckBox.setEnabled(true);
        } else {
            compoundedCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonFloatingActionPerformed

    private void jRadioButtonFixedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFixedActionPerformed
        showFixedRate();
    }//GEN-LAST:event_jRadioButtonFixedActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /**
        * find underlying
        */
        List prodtype = new ArrayList();
        prodtype.add(ProductTypeUtil.ProductType.INTEREST_RATE_INDEX);
        assetFinder = new AssetFinder(prodtype);

        NotifyDescriptor nd = new NotifyDescriptor(assetFinder, "Asset Finder", NotifyDescriptor.OK_CANCEL_OPTION,
            NotifyDescriptor.PLAIN_MESSAGE, null, NotifyDescriptor.OK_OPTION);

        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            Integer productId = assetFinder.getAssetId();

            if (productId != null) {
                Product p = (Product) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_PRODUCT_BY_ID, productId);
                jLabelUnderlyingId.setText(productId.toString());
                jTextFieldFloatingRate.setText(p.getShortName());
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        /**
        * Clear screen
        */
        setProduct(new Product());
        jTextFieldId.setText("");
        clearFields(this);
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        /**
        * find and load
        */
        assetFinder = new AssetFinder(ProductTypeUtil.getBondTypes());

        NotifyDescriptor nd = new NotifyDescriptor(assetFinder, "Asset Finder", NotifyDescriptor.OK_CANCEL_OPTION, NotifyDescriptor.PLAIN_MESSAGE,
            null, NotifyDescriptor.OK_OPTION);

        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            Integer productId = assetFinder.getAssetId();
            load(productId);
            assetFinder.setVisible(false);
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        /**
        * exit
        */
        this.close();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        /**
        * Save product.
        */
        fillProduct();
        storeProduct();
        }

        public void fillProduct() {

            if (getProduct() == null) {
                setProduct(new Product());
            }
            getProduct().setIsAsset(true);
            if (!jTextFieldId.getText().isEmpty()) {
                getProduct().setId(Integer.parseInt(jTextFieldId.getText()));
            }

            try {
                getProduct().setShortName(jTextFieldShortName.getText());
                getProduct().setLongName(jTextFieldLongName.getText());
                getProduct().setProductType(jComboBoxType.getSelectedItem().toString());
                getProduct().setNotionalCurrency(jComboBoxCurrency.getSelectedItem().toString());
                getProduct().setQuotationType(jComboBoxQuotationType.getSelectedItem().toString());
                getProduct().setQuantityType(Trade.QuantityType.NOTIONAL.name);
                getProduct().setNotionalMultiplier(new BigDecimal(1.));
                getProduct().setComment(jTextAreaComment.getText());
                for (ProductReference reference : getProductReferences()){
                    reference.setProduct(product);
                }
                getProduct().setProductReferences(getProductReferences());
                if (!jFormattedTextFieldSettlementDelay.getText().isEmpty()) {
                    getProduct().setSettlementDelay(Short.parseShort(jFormattedTextFieldSettlementDelay.getText()));
                } else {
                    getProduct().setSettlementDelay(new Short("3"));
                }

                if (jDateChooserIssueDate.getDate() != null) {
                    getProduct().setStartDate(jDateChooserIssueDate.getDate());
                }
                if (jDateChooserdMaturity.getDate() != null) {
                    getProduct().setMaturityDate(jDateChooserdMaturity.getDate());
                }

                /**
                * product rate
                */
                ProductRate productRate = getProduct().getProductRate();
                if (productRate == null) {
                    productRate = new ProductRate();
                    productRate.setProduct(getProduct());
                    getProduct().setProductRate(productRate);
                }
                if (!jFormattedTextFieldMinAmount.getText().isEmpty()) {
                    productRate.setMinimumQuantity(new BigDecimal(numberFormat.parse(jFormattedTextFieldMinAmount.getText()).doubleValue()));
                } else {
                    productRate.setMinimumQuantity(new BigDecimal("1"));
                }
                if (!jFormattedTextFieldIssuedAmount.getText().isEmpty()) {
                    productRate.setIssuedAmount(numberFormat.parse(jFormattedTextFieldIssuedAmount.getText()).longValue());
                }
                if (!jFormattedTextFieldSpread.getText().isEmpty()) {
                    productRate.setSpread(new BigDecimal(numberFormat.parse(jFormattedTextFieldSpread.getText()).doubleValue()).divide(BigDecimal.valueOf(10000)));
                }
                if (jComboBoxCountry.getSelectedItem() != null && !jComboBoxCountry.getSelectedItem().toString().isEmpty()) {
                    productRate.setCountry(jComboBoxCountry.getSelectedItem().toString());
                }
                if (!jFormattedTextFieldRepayPrice.getText().isEmpty()) {
                    productRate.setIssuePrice(new BigDecimal(numberFormat.parse(jFormattedTextFieldRepayPrice.getText()).doubleValue()));
                }
                if (!jFormattedTextFieldIssuePrice.getText().isEmpty()) {
                    productRate.setRepaymentPrice(new BigDecimal(numberFormat.parse(jFormattedTextFieldIssuePrice.getText()).doubleValue()));
                }
                if (!jFormattedTextFieldRate.getText().isEmpty()) {
                    productRate.setRate(new BigDecimal(numberFormat.parse(jFormattedTextFieldRate.getText()).doubleValue()).divide(BigDecimal.valueOf(100)));
                }
                if (!jFormattedTextFieldNotional.getText().isEmpty()) {
                    productRate.setInitialNotional(numberFormat.parse(jFormattedTextFieldNotional.getText()).doubleValue());
                }
                if (jComboBoxIssuerType.getSelectedItem()!=null){
                    productRate.setIssuerType(jComboBoxIssuerType.getSelectedItem().toString());
                }
                /**
                * credit
                */
                ProductCredit productCredit = getProduct().getProductCredit();
                if (productCredit == null) {
                    productCredit = new ProductCredit();
                    productCredit.setProduct(getProduct());
                    getProduct().setProductCredit(productCredit);
                }
                String issuerName = GUIUtils.getComponentStringValue(jComboBoxIssuer);
                LegalEntity issuer = (LegalEntity) DAOCallerAgent.callMethod(LegalEntityAccessor.class, LegalEntityAccessor.GET_LEGAL_ENTITY_BY_SHORT_NAME, issuerName);
                productCredit.setIssuer(issuer);
                productCredit.setSeniority(GUIUtils.getComponentStringValue(jComboBoxSeniority));

                /**
                * sub products
                */
                if (jRadioButtonFloating.isSelected() && !jLabelUnderlyingId.getText().isEmpty()) {
                    Product underlying = (Product) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_PRODUCT_BY_ID, Integer.parseInt(jLabelUnderlyingId.getText()));
                    if (underlying != null) {
                        getProduct().addUnderlying(underlying);
                    }
                } else {
                    getProduct().getUnderlyingProducts().clear();
                }

                /**
                * scheduler
                */
                Scheduler scheduler = getProduct().getScheduler();
                if (scheduler == null) {
                    scheduler = new Scheduler();
                    getProduct().setScheduler(scheduler);
                }
                if (jComboBoxFrequency.getSelectedItem() != null && !jComboBoxFrequency.getSelectedItem().toString().isEmpty()) {
                    scheduler.setFrequency(jComboBoxFrequency.getSelectedItem().toString());
                }
                if (jComboBoxDayCount.getSelectedItem() != null && !jComboBoxDayCount.getSelectedItem().toString().isEmpty()) {
                    scheduler.setDaycount(jComboBoxDayCount.getSelectedItem().toString());
                }
                if (jComboBoxAdjustment.getSelectedItem() != null && !jComboBoxAdjustment.getSelectedItem().toString().isEmpty()) {
                    scheduler.setAdjustment(jComboBoxAdjustment.getSelectedItem().toString());
                }
                if (!jFormattedTextFieldPayLag.getText().isEmpty()) {
                    scheduler.setPaymentLag(Integer.valueOf(jFormattedTextFieldPayLag.getText()));
                }
                if (!jFormattedTextFieldResetLag.getText().isEmpty()) {
                    scheduler.setResetLag(Integer.valueOf(jFormattedTextFieldResetLag.getText()));
                }
                scheduler.setIsPayInArrears(jCheckBoxPayInArrears.isSelected());
                scheduler.setIsPayLagBusDays(jCheckBoxPayBusDays.isSelected());
                scheduler.setIsResetInArrears(jCheckBoxResetInArrears.isSelected());
                scheduler.setIsResetLagBusDays(jCheckBoxResetBusLag.isSelected());

                if (jDateChooserPenultimateDate.getDate() != null) {
                    scheduler.setFirstDate(jDateChooserPenultimateDate.getDate());
                }
                if (jDateChooserfirstCouponDate.getDate() != null) {
                    scheduler.setPenultimateDate(jDateChooserfirstCouponDate.getDate());
                }

                /**
                * Compound or not
                */
                if (scheduler.getIsCompound()) {
                    compoundedCheckBox.setSelected(true);
                    compoundedFrequency.setSelectedItem(scheduler.getCompoundFrequency());
                    compoundedFrequency.setEnabled(true);

                }

            } catch (Exception e) {
                logger.error(StringUtils.formatErrorMessage(e));
            }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonShowReferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowReferencesActionPerformed
        /**
        * open product references
        */
        setProductRefsPanel(new ProductReferencesPanel(getProductReferences()));
        NotifyDescriptor nd = new NotifyDescriptor(getProductRef(), "Product References", NotifyDescriptor.OK_CANCEL_OPTION,
            NotifyDescriptor.PLAIN_MESSAGE, null, NotifyDescriptor.OK_OPTION);

        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {

            JTable table = getProductRef().getTable();
            setProductReferences(new ArrayList());
            for (int i = 0; i < table.getRowCount(); i++) {
                if (table.getValueAt(i, 1) != null) {
                    if (!table.getValueAt(i, 1).toString().isEmpty()) {
                        ProductReference prodref = new ProductReference();
                        prodref.setReferenceType(table.getValueAt(i, 0).toString());
                        prodref.setValue(table.getValueAt(i, 1).toString());
                        getProductReferences().add(prodref);
                    }
                }
            }
        }
    }//GEN-LAST:event_jButtonShowReferencesActionPerformed

    private void jFormattedTextFieldMinAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldMinAmountActionPerformed

    }//GEN-LAST:event_jFormattedTextFieldMinAmountActionPerformed

    private void jComboBoxQuotationTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxQuotationTypeActionPerformed

    }//GEN-LAST:event_jComboBoxQuotationTypeActionPerformed

    private void jComboBoxCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCurrencyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCurrencyActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed

    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    public void storeProduct() {
        if (getProduct().getShortName().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Short Name must not be empty.");
        } else if (getProduct().getNotionalCurrency() == null || getProduct().getNotionalCurrency().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Currency must not be empty.");
        } else if (getProduct().getProductType() == null || getProduct().getProductType().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Product Type must not be empty.");
        } else if (getProduct().getQuotationType() == null || getProduct().getQuotationType().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quotation Type must not be empty.");
        } else {
            try {
                setProduct((Product) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.STORE_PRODUCT, getProduct()));
                if (getProduct().getId() != null) {
                    jTextFieldId.setText(getProduct().getId().toString());
                    JOptionPane.showMessageDialog(this, "Saved with id " + getProduct().getId());
                }
            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }

    public void load(Integer productId) {
        if (productId != null) {
            try {
                setProduct((Product) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_PRODUCT_BY_ID, productId));
                List<ProductReference> references = (List) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_PRODUCT_REFERENCES, productId);
                getProduct().setProductReferences(references);
                setProductReferences(references);
                jTextFieldId.setText(productId.toString());
                jTextFieldLongName.setText(getProduct().getLongName());
                jTextFieldShortName.setText(getProduct().getShortName());
                jComboBoxType.setSelectedItem(getProduct().getProductType());
                jComboBoxCurrency.setSelectedItem(getProduct().getNotionalCurrency());
                jComboBoxQuotationType.setSelectedItem(getProduct().getQuotationType());

                if (getProduct().loadSingleUnderlying() != null) {
                    jTextFieldFloatingRate.setText(getProduct().loadSingleUnderlying().getShortName());
                    jLabelUnderlyingId.setText(getProduct().loadSingleUnderlying().getId().toString());
                    jRadioButtonFloating.setSelected(true);
                    showFloatingRateFields();
                    compoundedCheckBox.setEnabled(true);
                    compoundedFrequency.setEnabled(true);
                } else {
                    jRadioButtonFixed.setSelected(true);
                    jLabelUnderlyingId.setText(StringUtils.EMPTY_STRING);
                    jTextFieldFloatingRate.setText(StringUtils.EMPTY_STRING);
                    jRadioButtonFixed.setSelected(true);;
                }
                if (getProduct().getProductType().equalsIgnoreCase(ProductTypeUtil.ProductType.INTEREST_RATE_INDEX.getName())) {
                    jRadioButtonFloating.setSelected(true);
                    compoundedCheckBox.setEnabled(true);
                    compoundedFrequency.setEnabled(true);
                }
                if (getProduct().getMaturityDate() != null) {
                    jDateChooserdMaturity.setDate(getProduct().getMaturityDate());
                } else {
                    jDateChooserdMaturity.setDate(null);
                }
                if (getProduct().getStartDate() != null) {
                    jDateChooserIssueDate.setDate(getProduct().getStartDate());
                } else {
                    jDateChooserIssueDate.setDate(null);
                }
                if (getProduct().getSettlementDelay() != null) {
                    jFormattedTextFieldSettlementDelay.setText(getProduct().getSettlementDelay().toString());
                } else {
                    jFormattedTextFieldSettlementDelay.setText(StringUtils.EMPTY_STRING);
                }
                if (getProduct().getProductRate() != null) {
                    if (getProduct().getProductRate().getMinimumQuantity() != null) {
                        jFormattedTextFieldMinAmount.setText(decimalFormat.format(getProduct().getProductRate().getMinimumQuantity()));
                    } else {
                        jFormattedTextFieldMinAmount.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getProductRate().getIssuedAmount() != null) {
                        jFormattedTextFieldIssuedAmount.setText(decimalFormat.format(getProduct().getProductRate().getIssuedAmount()));
                    } else {
                        jFormattedTextFieldIssuedAmount.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getProductRate().getCountry() != null) {
                        jComboBoxCountry.setSelectedItem(getProduct().getProductRate().getCountry());
                    } else {
                        jComboBoxCountry.setSelectedIndex(0);
                    }
                    if (getProduct().getProductRate().getRate() != null) {
                        jFormattedTextFieldRate.setText(decimalFormat.format(getProduct().getProductRate().getRate().multiply(BigDecimal.valueOf(100))));
                    } else {
                        jFormattedTextFieldRate.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getProductRate().getInitialNotional() != null) {
                        jFormattedTextFieldNotional.setText(decimalFormat.format(getProduct().getProductRate().getInitialNotional()));
                    } else {
                        jFormattedTextFieldNotional.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getProductRate().getSpread() != null) {
                        jFormattedTextFieldSpread.setText(decimalFormat.format(getProduct().getProductRate().getSpread().multiply(BigDecimal.valueOf(10000))));
                    } else {
                        jFormattedTextFieldSpread.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getProductRate().getIssuePrice() != null) {
                        jFormattedTextFieldIssuePrice.setText(decimalFormat.format(getProduct().getProductRate().getIssuePrice()));
                    } else {
                        jFormattedTextFieldIssuePrice.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getProductRate().getRepaymentPrice() != null) {
                        jFormattedTextFieldRepayPrice.setText(decimalFormat.format(getProduct().getProductRate().getRepaymentPrice()));
                    } else {
                        jFormattedTextFieldRepayPrice.setText(StringUtils.EMPTY_STRING);
                    }
                }
                if (getProduct().getProductCredit() != null) {

                    if (getProduct().getProductCredit().getIssuer() != null) {
                        LegalEntity issuer = (LegalEntity) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_PRODUCT_ISSUER, product.getProductId());
                        if (issuer != null) {
                            jComboBoxIssuer.setSelectedItem(issuer.getShortName());
                        }
                    } else {
                        jComboBoxIssuer.setSelectedIndex(0);
                    }
                    if (getProduct().getProductCredit().getSeniority() != null) {
                        jComboBoxSeniority.setSelectedItem(getProduct().getProductCredit().getSeniority().toString());
                    } else {
                        jComboBoxSeniority.setSelectedIndex(0);
                    }
                }
                if (getProduct().getScheduler() != null) {
                    if (getProduct().getScheduler().getFrequency() != null) {
                        jComboBoxFrequency.setSelectedItem(getProduct().getScheduler().getFrequency());
                    } else {
                        jComboBoxFrequency.setSelectedIndex(0);
                    }
                    if (getProduct().getScheduler().getDaycount() != null) {
                        jComboBoxDayCount.setSelectedItem(getProduct().getScheduler().getDaycount());
                    } else {
                        jComboBoxDayCount.setSelectedIndex(0);
                    }
                    if (getProduct().getScheduler().getAdjustment() != null) {
                        jComboBoxAdjustment.setSelectedItem(getProduct().getScheduler().getAdjustment());
                    } else {
                        jComboBoxAdjustment.setSelectedIndex(0);
                    }
                    if (getProduct().getScheduler().getPaymentLag() != null) {
                        jFormattedTextFieldPayLag.setText(getProduct().getScheduler().getPaymentLag().toString());
                    } else {
                        jFormattedTextFieldPayLag.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getScheduler().getResetLag() != null) {
                        jFormattedTextFieldResetLag.setText(getProduct().getScheduler().getResetLag().toString());
                    } else {
                        jFormattedTextFieldResetLag.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getScheduler().getIsPayInArrears() != null) {
                        jCheckBoxPayInArrears.setSelected(getProduct().getScheduler().getIsPayInArrears());
                    }
                    if (getProduct().getScheduler().getIsResetInArrears() != null) {
                        jCheckBoxResetInArrears.setSelected(getProduct().getScheduler().getIsResetInArrears());
                    }
                    if (getProduct().getScheduler().getIsPayLagBusDays() != null) {
                        jCheckBoxPayBusDays.setSelected(getProduct().getScheduler().getIsPayLagBusDays());
                    }
                    if (getProduct().getScheduler().getIsResetLagBusDays() != null) {
                        jCheckBoxResetBusLag.setSelected(getProduct().getScheduler().getIsResetLagBusDays());
                    }
                    if (getProduct().getScheduler().getFirstDate() != null) {
                        jDateChooserPenultimateDate.setDate(getProduct().getScheduler().getFirstDate());
                    } else {
                        jDateChooserPenultimateDate.setDate(null);
                    }
                    if (getProduct().getScheduler().getPenultimateDate() != null) {
                        jDateChooserfirstCouponDate.setDate(getProduct().getScheduler().getPenultimateDate());
                    } else {
                        jDateChooserfirstCouponDate.setDate(null);
                    }
                    if (getProduct().getScheduler().getIsPayInArrears() != null) {
                        jCheckBoxPayInArrears.setSelected(getProduct().getScheduler().getIsPayInArrears());
                    }
                    if (getProduct().getScheduler().getIsResetInArrears() != null) {
                        jCheckBoxResetInArrears.setSelected(getProduct().getScheduler().getIsResetInArrears());
                    }
                    if (getProduct().getScheduler().getIsPayLagBusDays() != null) {
                        jCheckBoxPayBusDays.setSelected(getProduct().getScheduler().getIsPayLagBusDays());
                    }
                    if (getProduct().getScheduler().getIsResetLagBusDays() != null) {
                        jCheckBoxResetBusLag.setSelected(getProduct().getScheduler().getIsResetLagBusDays());
                    }
                }
                if (getProduct().getProductRate() != null) {
                    jComboBoxIssuerType.setSelectedItem(getProduct().getProductRate().getIssuerType());
                } else {
                    jComboBoxIssuerType.setSelectedItem(null);
                }
                setDisplayName(getName() + StringUtils.SPACE + getProduct().getShortName());
                /**
                 * Compound or not
                 */
                Scheduler scheduler = getProduct().getScheduler();
                if (scheduler != null && scheduler.getIsCompound()) {
                    compoundedCheckBox.setSelected(true);
                    compoundedFrequency.setSelectedItem(scheduler.getCompoundFrequency());
                    compoundedFrequency.setEnabled(true);
                }

            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox compoundedCheckBox;
    private javax.swing.JComboBox compoundedFrequency;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveAsNew;
    private javax.swing.JButton jButtonSchedule;
    private javax.swing.JButton jButtonShowReferences;
    private javax.swing.JCheckBox jCheckBoxPayBusDays;
    private javax.swing.JCheckBox jCheckBoxPayInArrears;
    private javax.swing.JCheckBox jCheckBoxResetBusLag;
    private javax.swing.JCheckBox jCheckBoxResetInArrears;
    private javax.swing.JComboBox jComboBoxAdjustment;
    private javax.swing.JComboBox jComboBoxCountry;
    private javax.swing.JComboBox jComboBoxCurrency;
    private javax.swing.JComboBox jComboBoxDayCount;
    private javax.swing.JComboBox jComboBoxFrequency;
    private javax.swing.JComboBox jComboBoxIssuer;
    private javax.swing.JComboBox jComboBoxIssuerType;
    private javax.swing.JComboBox jComboBoxQuotationType;
    private javax.swing.JComboBox jComboBoxSeniority;
    private javax.swing.JComboBox jComboBoxType;
    private com.toedter.calendar.JDateChooser jDateChooserIssueDate;
    private com.toedter.calendar.JDateChooser jDateChooserPenultimateDate;
    private com.toedter.calendar.JDateChooser jDateChooserdMaturity;
    private com.toedter.calendar.JDateChooser jDateChooserfirstCouponDate;
    private javax.swing.JFormattedTextField jFormattedTextFieldIssuePrice;
    private javax.swing.JFormattedTextField jFormattedTextFieldIssuedAmount;
    private javax.swing.JFormattedTextField jFormattedTextFieldMinAmount;
    private javax.swing.JFormattedTextField jFormattedTextFieldNotional;
    private javax.swing.JFormattedTextField jFormattedTextFieldPayLag;
    private javax.swing.JFormattedTextField jFormattedTextFieldRate;
    private javax.swing.JFormattedTextField jFormattedTextFieldRepayPrice;
    private javax.swing.JFormattedTextField jFormattedTextFieldResetLag;
    private javax.swing.JFormattedTextField jFormattedTextFieldSettlementDelay;
    private javax.swing.JFormattedTextField jFormattedTextFieldSpread;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelUnderlyingId;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButtonFixed;
    private javax.swing.JRadioButton jRadioButtonFloating;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaComment;
    private javax.swing.JTextField jTextFieldFloatingRate;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldLongName;
    private javax.swing.JTextField jTextFieldShortName;
    private org.jdesktop.swingx.JXButton loadEventXButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        initContext();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {

        p.setProperty("version", "1.0");

    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");

    }

    @Override
    public void initContext() {

        jDateChooserIssueDate.setDate(DateUtils.getDate());
        jDateChooserdMaturity.setDate(DateUtils.getDate());
        try {
            List<ProductTypeUtil.ProductType> productTypes = ProductTypeUtil.loadRateUnderlyings();
            if (productTypes != null) {
                for (ProductTypeUtil.ProductType productType : productTypes) {
                    jComboBoxType.addItem(productType.name);
                }
            }

            List<String> currencies = (List) DAOCallerAgent.callMethod(CurrencyAccessor.class, CurrencyAccessor.LOAD_CURRENCY_CODES);
            GUIUtils.fillCombo(jComboBoxCurrency, currencies);
            String defaultCurrency = (String) DAOCallerAgent.callMethod(UserAccessor.class, UserAccessor.GET_DEFAULT_CURRENCY,LoggedUser.getLoggedUserId());
            jComboBoxCurrency.setSelectedItem(defaultCurrency);

            List<String> quotationTypes = MarketQuoteAccessor.getQuoteTypes();
            GUIUtils.fillCombo(jComboBoxQuotationType, quotationTypes);

            List<String> issuers = (List) DAOCallerAgent.callMethod(LegalEntityAccessor.class, LegalEntityAccessor.GET_ISSUERS);
            GUIUtils.fillComboWithNullFirst(jComboBoxIssuer, issuers);

            /**
             * list of countries
             */
            List<String> countries = (List) DAOCallerAgent.callMethod(CountryAccessor.class, CountryAccessor.LOAD_COUNTRY_NAMES);
            GUIUtils.fillComboWithNullFirst(jComboBoxCountry, countries);

            /**
             * list of frequencies
             */
            List<String> frequencies = FrequencyUtil.getFrequencies();
            GUIUtils.fillComboWithNullFirst(jComboBoxFrequency, frequencies);
            GUIUtils.fillCombo(compoundedFrequency, frequencies);
            compoundedFrequency.setSelectedItem(FrequencyUtil.Frequency.DAILY.name);

            /**
             * list of dayCounts
             */
            List<String> dayCounts = (List) DAOCallerAgent.callMethod(DayCountAccessor.class, DayCountAccessor.GET_DAYCOUNTS);
            GUIUtils.fillComboWithNullFirst(jComboBoxDayCount, dayCounts);

            /**
             * list of adjustments
             */
            GUIUtils.fillComboWithNullFirst(jComboBoxAdjustment, ProductAccessor.getCouponAdjustments());

            /**
             * list of seniorities
             */
            List<String> seniorities = (List) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_BOND_SENIORITIES);
            GUIUtils.fillComboWithNullFirst(jComboBoxSeniority, seniorities);

            showFixedRate();
            /**
             * ShortCut for Amout and date
             */
            AmountShortCut.eventkey(jFormattedTextFieldNotional);
            AmountShortCut.eventkey(jFormattedTextFieldMinAmount);
            AmountShortCut.eventkey(jFormattedTextFieldIssuedAmount);

            DateShortCut.eventkey((JSpinnerDateEditor) jDateChooserIssueDate.getComponent(1));
            DateShortCut.eventkey((JSpinnerDateEditor) jDateChooserdMaturity.getComponent(1));
            DateShortCut.eventkey((JSpinnerDateEditor) jDateChooserPenultimateDate.getComponent(1));
            DateShortCut.eventkey((JSpinnerDateEditor) jDateChooserfirstCouponDate.getComponent(1));

            jFormattedTextFieldIssuePrice.setText("100");
            jFormattedTextFieldRepayPrice.setText("100");

            jRadioButtonFixed.setSelected(true);

            jFormattedTextFieldPayLag.setText("2");
            jFormattedTextFieldResetLag.setText("0");
            jCheckBoxPayBusDays.setSelected(true);
            jCheckBoxResetBusLag.setSelected(true);
            jCheckBoxPayInArrears.setSelected(true);

        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }

    private void showFixedRate() {
        /**
         * shows fixed rate
         */
        jLabel16.setVisible(true);
        jFormattedTextFieldRate.setVisible(true);
        jLabel31.setVisible(true);
        jLabel13.setVisible(false);
        jTextFieldFloatingRate.setVisible(false);
        jButton2.setVisible(false);
        jLabelUnderlyingId.setVisible(false);
        jLabel11.setVisible(false);
        jFormattedTextFieldSpread.setVisible(false);
        jLabel32.setVisible(false);
    }

    private void showFloatingRateFields() {
        /**
         * hide fixed rate
         */
        jLabel16.setVisible(false);
        jFormattedTextFieldRate.setVisible(false);
        jLabel31.setVisible(false);
        /**
         * shows floating rate
         */
        jLabel13.setVisible(true);
        jTextFieldFloatingRate.setVisible(true);
        jButton2.setVisible(true);
        jLabelUnderlyingId.setVisible(true);
        jLabel11.setVisible(true);
        jFormattedTextFieldSpread.setVisible(true);
        jLabel32.setVisible(true);
    }
}
