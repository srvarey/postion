/**
 * Copyright (C) 2013 Gaia Transparence
 * Gaia Transparence, 1 all√©e Paul Barillon - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3.0 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.referentials;

/**
 *
 * @author Jawhar Kamoun
 */
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.referentials.CountryAccessor;
import org.gaia.domain.referentials.Country;
import org.gaia.domain.utils.StringUtils;
import org.gaia.gui.common.GaiaTopComponent;
import org.gaia.gui.common.MenuManager;
import org.gaia.gui.utils.ExcelAdapter;
import org.gaia.gui.utils.GUIUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays countries.
 */
@ConvertAsProperties(dtd = "-//org.gaia.gui.referentials//Country//EN", autostore = false)
@TopComponent.Description(preferredID = "CountryTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.gaia.gui.referentials.CountryTopComponent")
@ActionReference(path = "Menu" + MenuManager.CountryTopComponentMenu, position = MenuManager.CountryTopComponent)
@TopComponent.OpenActionRegistration(displayName = "#CTL_CountryAction", preferredID = "CountryTopComponent")
@Messages({"CTL_CountryAction=Country", "CTL_CountryTopComponent=Countries", "HINT_CountryTopComponent=This is a Country window"})
public final class CountryTopComponent extends GaiaTopComponent {

    private static final Logger logger = Logger.getLogger(CountryTopComponent.class);
    private Country selectedCountry = null;

    public CountryTopComponent() {
        initComponents();
        setName(Bundle.CTL_CountryTopComponent());
        setToolTipText(Bundle.HINT_CountryTopComponent());
        ExcelAdapter myAd = new ExcelAdapter(jTableCountries);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        countryNameLabel = new javax.swing.JLabel();
        iso3Label = new javax.swing.JLabel();
        iso2Label = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldISO3 = new javax.swing.JTextField();
        jTextFieldISO2 = new javax.swing.JTextField();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        jComboBoxStatus = new javax.swing.JComboBox();
        statusLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCountries = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }
        };
        jButtonQuery = new javax.swing.JButton();

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(252, 245, 253));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.openide.awt.Mnemonics.setLocalizedText(countryNameLabel, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.countryNameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(iso3Label, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.iso3Label.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(iso2Label, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.iso2Label.text")); // NOI18N

        jTextFieldISO3.setName("jTextFieldISO3"); // NOI18N

        jTextFieldISO2.setName(""); // NOI18N

        jButtonDelete.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDelete, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.jButtonDelete.text")); // NOI18N
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonSave.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonNew.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonNew, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.jButtonNew.text")); // NOI18N
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jComboBoxStatus.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Inactive" }));

        org.openide.awt.Mnemonics.setLocalizedText(statusLabel, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.statusLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonNew))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iso3Label)
                            .addComponent(countryNameLabel)
                            .addComponent(iso2Label))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldISO3)
                                    .addComponent(jTextFieldISO2, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(statusLabel))
                            .addComponent(jTextFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jButtonSave)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                        .addComponent(jComboBoxStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryNameLabel)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldISO3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iso3Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iso2Label)
                    .addComponent(jTextFieldISO2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonNew))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTableCountries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {    },
            new String [] {
                "Name", "Code ISO3", "Code ISO2", "Status"
            }
        ));
        jTableCountries.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableCountries.getTableHeader().setReorderingAllowed(false);
        jTableCountries.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCountriesMouseClicked(evt);
            }
        });
        jTableCountries.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableCountriesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCountries);

        jButtonQuery.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonQuery, org.openide.util.NbBundle.getMessage(CountryTopComponent.class, "CountryTopComponent.jButtonQuery.text")); // NOI18N
        jButtonQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQueryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonQuery)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonQuery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed

        String countryName = jTextFieldName.getText();
        if (selectedCountry == null || StringUtils.isEmptyString(countryName)) {
            return;
        }
        try {
            DAOCallerAgent.callMethod(CountryAccessor.class, CountryAccessor.DELETE_COUNTRY, countryName);
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    /**
     * store data
     *
     * @param evt
     */
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if (StringUtils.isEmptyString(jTextFieldName.getText())) {
            JOptionPane.showMessageDialog(this, "Empty Country name not allowed", "Warning", JOptionPane.WARNING_MESSAGE); //adds white to the pop up
            return;
        }
        if (StringUtils.isEmptyString(jTextFieldISO3.getText()) || jTextFieldISO3.getText().length() != 3) {
            JOptionPane.showMessageDialog(this, "The ISO code 3 must be 3 characters", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (StringUtils.isEmptyString(jTextFieldISO2.getText()) || jTextFieldISO2.getText().length() != 2) {
            JOptionPane.showMessageDialog(this, "The ISO 2 code must be 2 characters", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (selectedCountry == null) {
            selectedCountry = new Country();
        }
        selectedCountry.setCodeIso3a(jTextFieldISO3.getText());
        selectedCountry.setCodeIso2a(jTextFieldISO2.getText());
        selectedCountry.setName(jTextFieldName.getText());
        if (!StringUtils.isEmptyString(idLabel.getText())) {
            selectedCountry.setCountryId(Integer.parseInt(idLabel.getText()));
        }
        selectedCountry.setStatus(jComboBoxStatus.getSelectedItem().toString());
        try {
            DAOCallerAgent.callMethod(CountryAccessor.class, CountryAccessor.STORE_COUNTRY, selectedCountry);
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        clearFields(this);
        idLabel.setText(StringUtils.EMPTY_STRING);
        selectedCountry = null;
    }//GEN-LAST:event_jButtonNewActionPerformed

    /**
     * refresh data
     *
     * @param evt
     */
    private void jTableCountriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCountriesMouseClicked
        refereshData(evt);
    }//GEN-LAST:event_jTableCountriesMouseClicked

    /**
     * refresh data
     *
     * @param evt
     */
    private void jTableCountriesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCountriesKeyPressed
        refereshData(evt);
    }//GEN-LAST:event_jTableCountriesKeyPressed

    private void jButtonQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQueryActionPerformed
        displayTable();
    }//GEN-LAST:event_jButtonQueryActionPerformed

    /**
     * refresh data
     *
     * @param evt
     */
    private void refereshData(java.awt.event.ComponentEvent evt) {
        int rownum = jTableCountries.getSelectedRow();
        if (rownum >= 0) {
            String countryName = GUIUtils.getTableValueAt(jTableCountries, rownum, 0);
            if (countryName != null) {
                try {
                    selectedCountry = (Country) DAOCallerAgent.callMethod(CountryAccessor.class, CountryAccessor.GET_COUNTRY_BY_NAME, countryName);
                    jTextFieldName.setText(selectedCountry.getName());
                    jTextFieldISO3.setText(selectedCountry.getCodeIso3a());
                    jTextFieldISO2.setText(selectedCountry.getCodeIso2a());

                    jComboBoxStatus.setSelectedItem(selectedCountry.getStatus());
                    idLabel.setText(selectedCountry.getCountryId().toString());
                } catch (Exception ex) {
                    logger.error(StringUtils.formatErrorMessage(ex));
                }
            }
        }
    }

    /**
     * display table countries
     */
    private void displayTable() {
        try {
            List<Country> countries = (List) DAOCallerAgent.callMethod(CountryAccessor.class, CountryAccessor.LOAD_ALL_COUNTRIES);
            DefaultTableModel tableModel = (DefaultTableModel) jTableCountries.getModel();
            while (tableModel.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            for (Country country : countries) {
                Object[] row = {country.getName(), country.getCodeIso3a(), country.getCodeIso2a(), country.getStatus()};
                tableModel.addRow(row);
            }
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countryNameLabel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel iso2Label;
    private javax.swing.JLabel iso3Label;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonQuery;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCountries;
    private javax.swing.JTextField jTextFieldISO2;
    private javax.swing.JTextField jTextFieldISO3;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {

        p.setProperty("version", "1.0");

    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");

    }
}
