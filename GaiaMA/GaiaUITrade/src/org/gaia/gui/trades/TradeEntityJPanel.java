/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 all√©e Paul Barillon
 * - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.trades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.legalEntity.LegalEntityAccessor;
import org.gaia.dao.trades.TradeAccessor;
import org.gaia.domain.legalEntity.BoAccount;
import org.gaia.domain.legalEntity.BoAccountIntermediary;
import org.gaia.domain.legalEntity.LegalEntity;
import org.gaia.domain.legalEntity.LegalEntityRole;
import org.gaia.domain.trades.Trade;
import org.gaia.domain.trades.TradeEntity;
import org.gaia.domain.utils.StringUtils;
import org.gaia.gui.common.LegalEntityFinder;
import org.jdesktop.swingx.JXComboBox;
import org.jdesktop.swingx.autocomplete.ComboBoxCellEditor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 *
 * @author Kamoun Jawhar
 */
public class TradeEntityJPanel extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(TradeEntityJPanel.class);
    /**
     * Creates new form TradeEntityJPanel
     */
    private WindowManager wm = WindowManager.getDefault();
    private Trade trade;
    private JXComboBox comboBox;
    private Collection<TradeEntity> tradeEntityCollection;
    private LegalEntity ccp = null;

    public TradeEntityJPanel() {
        initComponents();
        List<String> roles;
        try {
            roles = (List) DAOCallerAgent.callMethod(LegalEntityAccessor.class, LegalEntityAccessor.GET_ALL_ROLES);
            roles.add("Transferor");
            comboBox = new JXComboBox(new Vector(roles));
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
        jTable.removeColumn(jTable.getColumnModel().getColumn(0));
        jTable.removeColumn(jTable.getColumnModel().getColumn(0));
    }

    /**
     * add a TradeEntity
     */
    public void setTradeEntities(Trade _trade) {
        /**
         * if there is an trade
         */
        if (_trade.getTradeEntityCollection() != null) {
            tradeEntityCollection = new ArrayList<>(_trade.getTradeEntityCollection());
        } else {
            tradeEntityCollection = new ArrayList<>();
        }

        trade = _trade;
        jTable.getColumnModel().getColumn(1).setCellEditor(new ComboBoxCellEditor(comboBox));

        /**
         * fill the table with tradentity
         */
        fillJtable(tradeEntityCollection);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        saveTradeButton = new javax.swing.JButton();

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "tradeEntityId","Trade","Entity short name","Role"
            }
        ));
        jTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable);

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(TradeEntityJPanel.class, "TradeEntityJPanel.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, org.openide.util.NbBundle.getMessage(TradeEntityJPanel.class, "TradeEntityJPanel.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveTradeButton, org.openide.util.NbBundle.getMessage(TradeEntityJPanel.class, "TradeEntityJPanel.saveTradeButton.text")); // NOI18N
        saveTradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTradeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(addButton)
                .addGap(39, 39, 39)
                .addComponent(removeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(saveTradeButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addButton)
                .addComponent(removeButton)
                .addComponent(saveTradeButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        final LegalEntityFinder lef = new LegalEntityFinder(null);
        LegalEntity legalEntity = null;
        NotifyDescriptor nd = new NotifyDescriptor(lef, "Entity Finder", NotifyDescriptor.OK_CANCEL_OPTION, NotifyDescriptor.PLAIN_MESSAGE, null,
                NotifyDescriptor.OK_OPTION);

        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            Integer entityId = lef.getLegalEntityId();
            if (entityId != null) {
                try {
                    legalEntity = (LegalEntity) DAOCallerAgent.callMethod(LegalEntityAccessor.class, LegalEntityAccessor.GET_LEGAL_ENTITY_BY_ID, entityId);
                } catch (Exception ex) {
                    logger.error(StringUtils.formatErrorMessage(ex));
                }
            } else {
                return;
            }

            TradeEntity newTradeEntuEntity = new TradeEntity();
            newTradeEntuEntity.setLegalEntity(legalEntity);
            newTradeEntuEntity.setTrade(trade);
            ArrayList<LegalEntityRole> roleList = new ArrayList<>(legalEntity.getRoles());
            if (!roleList.isEmpty()) {
                newTradeEntuEntity.setRole(roleList.get(0).getRole());
            }
            tradeEntityCollection.add(newTradeEntuEntity);
            fillJtable(tradeEntityCollection);
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void saveTradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTradeButtonActionPerformed

        if (!checkDuplicatedRole()) {
            JOptionPane.showMessageDialog(this, "Error \nDuplicated role not authorized");
            return;
        }
        if (tradeEntityCollection.equals(trade.getTradeEntityCollection())) {
            return;
        }
        trade.setTradeEntityCollection(tradeEntityCollection);
        try {
            DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.STORE_TRADE, trade);
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
        Set<TopComponent> openedComponent = wm.getRegistry().getOpened();
        for (TopComponent topComponent : openedComponent) {
            if (topComponent instanceof GaiaTradeTopComponent) {
                GaiaTradeTopComponent temp = (GaiaTradeTopComponent) topComponent;
                if (temp.getTrade() != null && temp.getTrade().getTradeId() == trade.getId() && trade.getId()!=null) {
                    temp.loadByTradeId(temp.getTrade().getId());
                }
            }
        }
    }//GEN-LAST:event_saveTradeButtonActionPerformed

    /**
     * check if existe role
     */
    private boolean checkDuplicatedRole() {
        Collection<String> roleList = new ArrayList<>();

        int rownumber = 0;
        for (TradeEntity tradeEntity : tradeEntityCollection) {
            tradeEntity.setRole((String) jTable.getValueAt(rownumber, 1));
            if (roleList.contains(tradeEntity.getRole())) {
                ccp = null;
                return false;
            }

            if (LegalEntityRole.LegalEntityRoleEnum.CCP_ROLE.name.equalsIgnoreCase(tradeEntity.getRole())) {
                if (trade.getCounterparty() != tradeEntity.getLegalEntity()) {
                    ccp = tradeEntity.getLegalEntity();
                }
            }
            roleList.add(tradeEntity.getRole());
            rownumber++;
        }
        makeCCP();
        return true;
    }

    private boolean hasCCProle(LegalEntity counterparty) {
        ArrayList<LegalEntityRole> roles = new ArrayList(counterparty.getRoles());
        for (LegalEntityRole legalEntityRole : roles) {
            if (LegalEntityRole.LegalEntityRoleEnum.CCP_ROLE.name.equalsIgnoreCase(legalEntityRole.getRole())) {
                return true;
            }
        }
        return false;
    }

    /**
     * make CCP
     */
    private void makeCCP() {
        if (trade != null && ccp != null) {
            if (!hasCCProle(trade.getCounterparty())) {
                try {
                    TradeEntity newTradeEntuEntity = new TradeEntity();
                    newTradeEntuEntity.setLegalEntity(trade.getCounterparty());
                    newTradeEntuEntity.setTrade(trade);
                    newTradeEntuEntity.setRole(LegalEntityRole.LegalEntityRoleEnum.COUNTERPARTY_ROLE.name);

                    tradeEntityCollection.add(newTradeEntuEntity);

                    List<BoAccount> accountList = (List) DAOCallerAgent.callMethod(LegalEntityAccessor.class,
                            LegalEntityAccessor.GET_BO_ACCOUNTS, trade.getInternalCounterparty().getLegalEntityId(),
                            ccp.getLegalEntityId(), LegalEntityRole.LegalEntityRoleEnum.CCP_ROLE.name);
                    if (accountList != null && !accountList.isEmpty()) {
                        BoAccount account = accountList.get(0);
                        if (account.getBoAccountIntermediaryCollection() != null) {
                            BoAccountIntermediary intermediary = LegalEntityAccessor.getDefaultIntermediaryFromList(new ArrayList(account.getBoAccountIntermediaryCollection()));
                            if (intermediary != null) {
                                newTradeEntuEntity = new TradeEntity();
                                newTradeEntuEntity.setLegalEntity(intermediary.getLegalEntity());
                                newTradeEntuEntity.setTrade(trade);
                                newTradeEntuEntity.setRole(LegalEntityRole.LegalEntityRoleEnum.CLEARING_MEMBER_ROLE.name);
                                tradeEntityCollection.add(newTradeEntuEntity);
                            }
                        }

                    }
                } catch (Exception ex) {
                    logger.error(StringUtils.formatErrorMessage(ex));
                }
            }
            fillJtable(tradeEntityCollection);
        }
    }
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int[] selectedRows = jTable.getSelectedRows();
        if (selectedRows != null) {
            DefaultTableModel model = (DefaultTableModel) jTable.getModel();
            for (int i = 0; i < selectedRows.length; i++) {
                removeFromTradeEntitiesCollection((Vector) model.getDataVector().elementAt(selectedRows[i]));
                model.removeRow(selectedRows[i]);
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveTradeButton;
    // End of variables declaration//GEN-END:variables

    /**
     * function to fill the table
     */
    private void fillJtable(Collection<TradeEntity> tradeEntityCollection) {
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        model.getDataVector().clear();
        model.setRowCount(0);

        Object[] data = new Object[4];
        for (TradeEntity tradeEntity : tradeEntityCollection) {
            try {
                if (tradeEntity.getLegalEntity() != null) {
                    data[0] = tradeEntity.getTradeEntityId();
                    data[1] = tradeEntity.getTrade();
                    data[2] = tradeEntity.getLegalEntity().getShortName();
                    data[3] = tradeEntity.getRole();
                    model.addRow(data);
                }
            } catch (Exception e) {
                logger.error(StringUtils.formatErrorMessage(e));
            }
        }
    }

    /**
     * function remove tradEntity
     */
    private void removeFromTradeEntitiesCollection(Vector dataVector) {
        TradeEntity tradeEntityToRemove = null;
        int rownumber = 0;
        for (Iterator<TradeEntity> it = tradeEntityCollection.iterator(); it.hasNext();) {
            tradeEntityToRemove = it.next();
            tradeEntityToRemove.setRole((String) jTable.getValueAt(rownumber, 1));

            if (tradeEntityToRemove.getTradeEntityId() != null && !tradeEntityToRemove.getTradeEntityId().equals(dataVector.get(0))) {
                continue;
            }
            if (!tradeEntityToRemove.getTrade().equals(dataVector.get(1))) {
                continue;
            }
            if (!tradeEntityToRemove.getLegalEntity().getShortName().equalsIgnoreCase((String) dataVector.get(2))) {
                continue;
            }
            if (!tradeEntityToRemove.getRole().equalsIgnoreCase((String) dataVector.get(3))) {
                continue;
            }
            break;
        }
        if (tradeEntityToRemove != null) {
            tradeEntityCollection.remove(tradeEntityToRemove);
        }
    }
}
