/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 allée Paul Barillon - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3.0 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.reports;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.embed.swing.JFXPanel;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Bounds;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.image.WritableImage;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.gaia.dao.reports.PositionTree;
import org.gaia.domain.utils.StringUtils;
import org.openide.util.Exceptions;

/**
 *
 * @author Zakaria Laguel
 */
public class BarChartPanel extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(BarChartPanel.class);
    private static final int PANEL_WIDTH_INT = 1600;
    private static final int PANEL_HEIGHT_INT = 700;
    private JFXPanel chartFxPanel;
    private BarChart chart;
    private PositionTree.PositionNode root;
    private ArrayList<String> headers;
    private Scene scene;

    BarChartPanel(PositionTree.PositionNode positionNode, ArrayList<String> headings, List<String> barChartColumns) {
        initComponents();
        drawChart(positionNode, headings, barChartColumns);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBarPanel = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        exportButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();

        toolBar.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(exportButton, org.openide.util.NbBundle.getMessage(BarChartPanel.class, "BarChartPanel.exportButton.text")); // NOI18N
        exportButton.setFocusable(false);
        exportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        toolBar.add(exportButton);

        centerPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout toolBarPanelLayout = new javax.swing.GroupLayout(toolBarPanel);
        toolBarPanel.setLayout(toolBarPanelLayout);
        toolBarPanelLayout.setHorizontalGroup(
            toolBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(centerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(toolBarPanelLayout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        toolBarPanelLayout.setVerticalGroup(
            toolBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolBarPanelLayout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(centerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed

        /**
         * create JavaFX scene}
         */
        Platform.setImplicitExit(false);

        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                JFileChooser choice = new JFileChooser();
                choice.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int retour = choice.showOpenDialog(null);
                if (retour == JFileChooser.APPROVE_OPTION) {
                    // un fichier a été choisi (sortie par OK)
                    // nom du fichier  choisi
                    choice.getSelectedFile().getName();
                    // chemin absolu du fichier choisi
                    String path = choice.getSelectedFile().getAbsolutePath();

                    Stage stage = new Stage();

                    WritableImage snapShot;

                    stage.setScene(scene);

                    snapShot = scene.snapshot(null);
                    try {
                        ImageIO.write(SwingFXUtils.fromFXImage(snapShot, null), "png", new File((path) + ".png"));        // TODO add your handling code here:
                        JOptionPane.showMessageDialog(centerPanel, "Chart saved");
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        });
    }//GEN-LAST:event_exportButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton exportButton;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JPanel toolBarPanel;
    // End of variables declaration//GEN-END:variables
    /**
     * @param root
     * @param headers
     * @param columnNames
     */
    private void drawChart(final PositionTree.PositionNode root, final ArrayList<String> headers, final List<String> columnNames) {
        this.root = root;
        this.headers = headers;
        if (chartFxPanel != null) {
            removeAll();
        }

        /**
         * create javafx panel for charts
         */
        JFrame frame = new JFrame("FX");
        chartFxPanel = new JFXPanel();
        frame.add(chartFxPanel);
        chartFxPanel.setVisible(true);

        Platform.setImplicitExit(false);

        /**
         * create JavaFX scene
         */
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                createSceneForBarChart(columnNames);
            }
        });
        chartFxPanel.setPreferredSize(new Dimension(PANEL_WIDTH_INT, PANEL_HEIGHT_INT));
        chartFxPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));

        chartFxPanel.setEnabled(true);

        /**
         * create javafx panel for browser
         */
        centerPanel.add(chartFxPanel, BorderLayout.CENTER);

    }

    public void createSceneForBarChart(final List<String> columnNames) {
        try {

            final CategoryAxis xAxis = new CategoryAxis();
            final NumberAxis yAxis = new NumberAxis();
            chart = new BarChart(xAxis, yAxis);
            chart.setTitle("Report");
            yAxis.setLabel("Values");
//            Timeline timeline = null;
            HashMap<String, XYChart.Series> series = new HashMap();
            if (root != null && root.getChildCount() > 0 && columnNames != null && headers != null) {
                for (final String column : columnNames) {
                    int index = headers.indexOf(column);
                    if (index == -1) {
                        JOptionPane.showMessageDialog(this, "Missing defined columns");
                        return;
                    }
                    if (index >= 0) {
                        HashMap<String, BigDecimal> values = new HashMap();
                        if (!root.isLeaf()) {
                            for (int i = 0; i < root.getChildCount(); i++) {
                                PositionTree.PositionNode child = (PositionTree.PositionNode) root.getChildAt(i);
                                Object[] data = child.getData();

                                if (data != null && data[index] != null && data[index] instanceof BigDecimal) {
                                    BigDecimal value = (BigDecimal) data[index];
                                    if (value.doubleValue() != 0) {
                                        String tag = null;
                                        int j = 0;
                                        if (data[j] == null || data[j].toString().equalsIgnoreCase(StringUtils.EMPTY_STRING)) {
                                            data[j] = "Other";
                                        }
                                        while (tag == null && j < data.length) {
                                            if (data[j] != null && data[j] instanceof String && !data[j].toString().equalsIgnoreCase(StringUtils.EMPTY_STRING)) {
                                                tag = data[j].toString();
                                            }
                                            j++;
                                        }
                                        if (tag != null) {
                                            values.put(tag, value);
                                        }
                                    }
                                }
                            }
                        }
                        List<String> keys = new ArrayList(values.keySet());
                        Collections.sort(keys, new HashMapComparator(values));
                        final XYChart.Series serie = new XYChart.Series();
                        serie.setName(column);
                        series.put(column, serie);
                        for (String key : keys) {
                            final XYChart.Data<String, BigDecimal> item = new XYChart.Data(key, values.get(key));

                            item.nodeProperty().addListener(new ChangeListener<Node>() {
                                @Override
                                public void changed(ObservableValue<? extends Node> ov, Node oldNode, final Node bar) {

                                    if (bar != null) {
                                        setNodeStyle(item, column, columnNames);
                                        displayLabelForData(item);
                                    }
                                }
                            });
                            serie.getData().add(item);
                        }
                        if (!values.isEmpty()) {
                            chart.getData().add(serie);
                        }
                    }
                }
            }
            if (chartFxPanel != null && chart != null) {
                scene = new Scene(chart);
                chartFxPanel.setScene(scene);

                for (Node n : chart.lookupAll(".bar-legend-symbol.default-color0")) {
                    n.setStyle("-fx-background-color: " + "navy" + ";");
                }
                for (Node n : chart.lookupAll(".bar-legend-symbol.default-color1")) {
                    n.setStyle("-fx-background-color: " + "tomato" + ";");
                }
            }
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }

    /*
     *Change color of the bar for a given column bench expo or fund expo%
     */
    private void setNodeStyle(XYChart.Data<String, BigDecimal> data, String column, List<String> columnNames) {
        Node bar = data.getNode();
        if (columnNames.indexOf(column) == 0) {
            bar.setStyle("-fx-bar-fill: navy;");
        } else {
            bar.setStyle("-fx-bar-fill: tomato;");
        }
    }

    /*
     *places a text label with a bar's value above a bar node for a given XYChart.Data
     */
    private void displayLabelForData(XYChart.Data<String, BigDecimal> data) {
        final Node bar = data.getNode();
        double value = floor(data.getYValue().doubleValue(), 2);
        final Text dataText = new Text(value + "");
        bar.parentProperty().addListener(new ChangeListener<Parent>() {
            @Override
            public void changed(ObservableValue<? extends Parent> ov, Parent oldParent, Parent parent) {
                Group parentGroup = (Group) parent;
                parentGroup.getChildren().add(dataText);
            }
        });
        bar.boundsInParentProperty().addListener(new ChangeListener<Bounds>() {
            @Override
            public void changed(ObservableValue<? extends Bounds> ov, Bounds oldBounds, Bounds bounds) {
                dataText.setLayoutX(
                        Math.round(
                                bounds.getMinX() + bounds.getWidth() / 2 - dataText.prefWidth(-1) / 2
                        )
                );
                dataText.setLayoutY(
                        Math.round(
                                bounds.getMinY() - dataText.prefHeight(-1) * 0.5
                        )
                );
            }
        });

    }

    public void getValues(PositionTree.PositionNode bar, HashMap<String, BigDecimal> values, int index) {
        Object[] data = bar.getData();
        bar.getParent();
        if (data != null && data[index] != null && data[index] instanceof BigDecimal) {
            BigDecimal value = (BigDecimal) data[index];
            if (value.doubleValue() != 0) {
                String tag = null;
                int i = 0;
                while (tag == null && i < data.length) {
                    if (data[i] != null && data[i] instanceof String && !data[i].toString().equalsIgnoreCase(StringUtils.EMPTY_STRING)) {
                        tag = data[i].toString();
                    }
                    i++;
                }
                if (tag != null) {
                    values.put(tag, value);
                }
            }
        }
        if (!bar.isLeaf()) {
            for (int i = 0; i < bar.getChildCount(); i++) {
                PositionTree.PositionNode child = (PositionTree.PositionNode) bar.getChildAt(i);
                getValues(child, values, index);
            }
        }
    }

    public static double floor(double a, int n) {
        double p = Math.pow(10.0, n);
        return Math.floor((a * p) + 0.5) / p;
    }

    public class HashMapComparator implements Comparator<String> {

        private final Map<String, BigDecimal> myMap;

        public HashMapComparator(Map<String, BigDecimal> myMap) {
            this.myMap = myMap;
        }

        @Override
        public int compare(String str1, String str2) {
            BigDecimal bd1 = myMap.get(str1);
            BigDecimal bd2 = myMap.get(str2);
            if (bd1.doubleValue() > bd2.doubleValue()) {
                return -1;
            } else if (bd1.doubleValue() < bd2.doubleValue()) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
