/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 all√©e Paul Barillon
 * - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.referentials;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.referentials.DomainValuesAccessor;
import org.gaia.domain.referentials.DomainValue;
import org.gaia.domain.referentials.DomainValuePK;
import org.gaia.domain.utils.StringUtils;
import org.gaia.gui.common.GaiaTopComponent;
import org.gaia.gui.common.MenuManager;
import org.gaia.gui.utils.ErrorMessageUI;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays domain values.
 */
@ConvertAsProperties(dtd = "-//org.gaia.gui.referentials//DomainValue//EN", autostore = false)
@TopComponent.Description(preferredID = "DomainValueTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.gaia.gui.referentials.DomainValueTopComponent")
@ActionReference(path = "Menu" + MenuManager.DomainValueTopComponentMenu, position = MenuManager.DomainValueTopComponent)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DomainValueAction", preferredID = "DomainValueTopComponent")
@Messages({"CTL_DomainValueAction=Domain Values", "CTL_DomainValueTopComponent=Domain Values Window", "HINT_DomainValueTopComponent=This is a Domain Values window"})

public final class DomainValueTopComponent extends GaiaTopComponent {

    private static final Logger logger = Logger.getLogger(DomainValueTopComponent.class);
    private DomainValue domainValue = null;

    public DomainValueTopComponent() {
        initComponents();
        setName(Bundle.CTL_DomainValueTopComponent());
        setToolTipText(Bundle.HINT_DomainValueTopComponent());
        displayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        descriptionPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        descLabel = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldValue = new javax.swing.JTextField();
        jTextFieldDescription = new javax.swing.JTextField();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lockedCheckBox = new javax.swing.JCheckBox();
        jButtonQuery = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        backgroundPanel.setBackground(new java.awt.Color(254, 252, 254));

        descriptionPanel.setBackground(new java.awt.Color(230, 230, 253));
        descriptionPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(DomainValueTopComponent.class, "DomainValueTopComponent.nameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(valueLabel, org.openide.util.NbBundle.getMessage(DomainValueTopComponent.class, "DomainValueTopComponent.valueLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(descLabel, org.openide.util.NbBundle.getMessage(DomainValueTopComponent.class, "DomainValueTopComponent.descLabel.text")); // NOI18N

        jTextFieldName.setName("jTextFieldName"); // NOI18N

        jButtonDelete.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDelete, org.openide.util.NbBundle.getMessage(DomainValueTopComponent.class, "DomainValueTopComponent.jButtonDelete.text")); // NOI18N
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonSave.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(DomainValueTopComponent.class, "DomainValueTopComponent.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        lockedCheckBox.setBackground(new java.awt.Color(230, 230, 253));
        org.openide.awt.Mnemonics.setLocalizedText(lockedCheckBox, org.openide.util.NbBundle.getMessage(DomainValueTopComponent.class, "DomainValueTopComponent.lockedCheckBox.text")); // NOI18N
        lockedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockedCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout descriptionPanelLayout = new javax.swing.GroupLayout(descriptionPanel);
        descriptionPanel.setLayout(descriptionPanelLayout);
        descriptionPanelLayout.setHorizontalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, descriptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(descriptionPanelLayout.createSequentialGroup()
                        .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valueLabel)
                            .addComponent(nameLabel)
                            .addComponent(descLabel))
                        .addGap(18, 18, 18)
                        .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldValue)
                            .addComponent(jTextFieldName)
                            .addComponent(jTextFieldDescription)))
                    .addGroup(descriptionPanelLayout.createSequentialGroup()
                        .addGap(0, 128, Short.MAX_VALUE)
                        .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lockedCheckBox)
                            .addGroup(descriptionPanelLayout.createSequentialGroup()
                                .addComponent(jButtonSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDelete)))))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        descriptionPanelLayout.setVerticalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(descriptionPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descLabel)
                    .addComponent(jTextFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lockedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonDelete))
                .addGap(25, 25, 25))
        );

        jButtonQuery.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonQuery, org.openide.util.NbBundle.getMessage(DomainValueTopComponent.class, "DomainValueTopComponent.jButtonQuery.text")); // NOI18N
        jButtonQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQueryActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                treeMousePressed(evt);
            }
        });
        scrollPane.setViewportView(tree);

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonQuery)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(descriptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonQuery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addComponent(descriptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * delete
     *
     * @param evt
     */
    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        String name = jTextFieldName.getText();
        String value = jTextFieldValue.getText();
        if (StringUtils.isEmptyString(name)) {
            return;
        }
        if (!lockedCheckBox.isSelected()) {
            try {
                DAOCallerAgent.callMethod(DomainValuesAccessor.class, DomainValuesAccessor.DELETE_DOMAIN_VALUE, name, value);
                DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
                DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
                for (int i = 0; i < root.getChildCount(); i++) {
                    DefaultMutableTreeNode child1 = (DefaultMutableTreeNode) root.getChildAt(i);
                    for (int j = 0; j < child1.getChildCount(); j++) {
                        DefaultMutableTreeNode child2 = (DefaultMutableTreeNode) child1.getChildAt(j);
                        if (child1.toString().equals(name) && child2.toString().equals(value)) {
                            child1.remove(j);
                        }
                    }
                }
                model.setRoot(root);
                tree.setModel(model);
            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        } else {
            (new ErrorMessageUI("You cannot delete locked domain values.")).setVisible(true);
        }
        displayTable();
        clearFields(this);
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    /**
     * store data
     *
     * @param evt
     */
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

        if (StringUtils.isEmptyString(jTextFieldName.getText())) {
            return;
        }
        domainValue = new DomainValue();
        DomainValuePK domainValuePK = new DomainValuePK();
        domainValue.setDescription(jTextFieldDescription.getText());
        domainValuePK.setName(jTextFieldName.getText());
        domainValuePK.setValue(jTextFieldValue.getText());
        domainValue.setDomainValuesPK(domainValuePK);
        domainValue.setLocked(lockedCheckBox.isSelected());

        try {
            DAOCallerAgent.callMethod(DomainValuesAccessor.class, DomainValuesAccessor.STORE_DOMAIN_VALUE, domainValue);
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }

        String name = jTextFieldName.getText();
        String value = jTextFieldValue.getText();
        if (!lockedCheckBox.isSelected()) {
            DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            for (int i = 0; i < root.getChildCount(); i++) {
                DefaultMutableTreeNode child = (DefaultMutableTreeNode) root.getChildAt(i);
                if (child.toString().equals(name)) {
                    child.add(new DefaultMutableTreeNode(value));
                }
            }
            model.setRoot(root);
            tree.setModel(model);
        }
        displayTable();
        clearFields(this);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /**
     * locked
     *
     * @param evt
     */
    private void lockedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockedCheckBoxActionPerformed

        if (domainValue != null && !lockedCheckBox.isSelected()) {
            JOptionPane.showMessageDialog(this, "It is not possible.");
            lockedCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_lockedCheckBoxActionPerformed

    /**
     * display Table query
     *
     * @param evt
     */
    private void jButtonQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQueryActionPerformed
        displayTable();
    }//GEN-LAST:event_jButtonQueryActionPerformed

    private void treeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMousePressed
        refereshData(evt);
    }//GEN-LAST:event_treeMousePressed

    /**
     * referesh Data
     *
     * @param evt
     */
    private void refereshData(java.awt.event.ComponentEvent evt) {
        DefaultMutableTreeNode node;
        String nom;
        String nomparent;

        node = (DefaultMutableTreeNode) ((javax.swing.JTree) evt.getComponent()).getLastSelectedPathComponent();
        if (node != null && node.isLeaf()) {

            nom = node.getUserObject().toString();
            nomparent = ((DefaultMutableTreeNode) node.getParent()).getUserObject().toString();

            try {
                domainValue = (DomainValue) DAOCallerAgent.callMethod(DomainValuesAccessor.class, DomainValuesAccessor.GET_DOMAIN_VALUE_BY_NAME_AND_VALUE, nomparent, nom);
                jTextFieldName.setText(nomparent);
                jTextFieldValue.setText(nom);
                jTextFieldDescription.setText(domainValue.getDescription());
                lockedCheckBox.setSelected(domainValue.getLocked());
            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }

    /**
     * display table
     */
    private void displayTable() {
        try {
            List<DomainValue> resultList = (List) DAOCallerAgent.callMethod(DomainValuesAccessor.class, DomainValuesAccessor.LOAD_ALL_DOMAIN_VALUES);
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("root", true);
            tree.setModel(new DefaultTreeModel(root));
            String lastDomainNode = "";
            DefaultMutableTreeNode domainNode = null;
            for (DomainValue domainValue : resultList) {
                if (!lastDomainNode.equalsIgnoreCase(domainValue.getDomainValuesPK().getName())) {
                    domainNode = new DefaultMutableTreeNode(domainValue.getDomainValuesPK().getName(), true);
                    root.add(domainNode);
                    lastDomainNode = domainValue.getDomainValuesPK().getName();
                }
                if ("domainValues".equalsIgnoreCase(domainValue.getDomainValuesPK().getName())) {
                    DefaultMutableTreeNode domainNode2 = new DefaultMutableTreeNode(domainValue.getDomainValuesPK().getValue(), true);
                    root.add(domainNode2);
                }
                DefaultMutableTreeNode valueNode = new DefaultMutableTreeNode(domainValue.getDomainValuesPK().getValue(), true);
                if (domainNode != null) {
                    domainNode.add(valueNode);
                }
            }
            tree.expandPath(new TreePath(root.getPath()));
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel descLabel;
    private javax.swing.JPanel descriptionPanel;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonQuery;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextFieldDescription;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldValue;
    private javax.swing.JCheckBox lockedCheckBox;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTree tree;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {

        p.setProperty("version", "1.0");

    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");

    }
}
