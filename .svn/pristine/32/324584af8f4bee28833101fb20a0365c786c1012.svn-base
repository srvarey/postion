/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 all√©e Paul Barillon
 * - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.common;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Vector;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.trades.ProductTypeUtil;
import org.gaia.dao.trades.TradeAccessor;
import org.gaia.domain.utils.StringUtils;
import org.gaia.gui.utils.GUIUtils;

/**
 *
 * @author User
 */
public class TradeFinder extends javax.swing.JPanel {


    private TableRowSorter rowSorter;
    private final DefaultTableModel model;
    private static final Logger logger = Logger.getLogger(TradeFinder.class);
    private final List<String> typeList;

    /**
     * Creates new form TradeFinder
     * @param types
     */
    public TradeFinder(List<ProductTypeUtil.ProductType> types) {
        initComponents();
        Collections.sort(types);
        typeList = new ArrayList<>();
        if (types != null) {
            for (Object o : types) {
                String s = ((ProductTypeUtil.ProductType) o).name;
                typeList.add(s);
            }
        }
        GUIUtils.fillComboWithNullFirst(jComboBoxType, typeList);
        jTextFieldNameLike.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                newFilter();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                newFilter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                newFilter();
            }
        });

        tradesTable.setAutoCreateRowSorter(true);
        TableColumnModel tcm = tradesTable.getColumnModel();
        tcm.getColumn(0).setMaxWidth(60);

        model = (DefaultTableModel) tradesTable.getModel();

    }

    /**
     * Update the row filter regular expression from the expression in the text
     * box.
     */
    private void newFilter() {
        RowFilter<DefaultTableModel, Object> rowFilter;
        // If current expression doesn't parse, don't update.
        try {
            rowFilter = RowFilter.regexFilter("(?i)" + jTextFieldNameLike.getText(), 1);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        if (rowSorter != null) {
            rowSorter.setRowFilter(rowFilter);
        }

    }

    /**
     * return getTradeId
     * @return
     */
    public Integer getTradeId() {
        Integer id = null;
        int r = tradesTable.getSelectedRow();
        if (r > -1) {

            String s = GUIUtils.getTableValueAt(tradesTable, r, 0);
            id = Integer.parseInt(s);
        }
        return id;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxType = new javax.swing.JComboBox();
        typeLabel = new javax.swing.JLabel();
        FindButton = new javax.swing.JButton();
        idTextField = new javax.swing.JFormattedTextField(new DecimalFormat("########"));
        idLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tradesTable = new javax.swing.JTable();
        jTextFieldNameLike = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(254, 252, 254));

        jComboBoxType.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(TradeFinder.class, "TradeFinder.typeLabel.text")); // NOI18N

        FindButton.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(FindButton, org.openide.util.NbBundle.getMessage(TradeFinder.class, "TradeFinder.FindButton.text")); // NOI18N
        FindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(idLabel, org.openide.util.NbBundle.getMessage(TradeFinder.class, "TradeFinder.idLabel.text")); // NOI18N

        tradesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Short Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tradesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tradesTable);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(TradeFinder.class, "TradeFinder.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addComponent(jTextFieldNameLike, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FindButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(typeLabel)
                            .addGap(33, 33, 33)
                            .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNameLike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(FindButton))
                .addContainerGap(481, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void FindButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindButtonActionPerformed
        try {

            String name=jTextFieldNameLike.getText();
            String sTypeList;
            if (StringUtils.isEmptyString(GUIUtils.getComponentStringValue(jComboBoxType))) {
                sTypeList=StringUtils.collectionToString(typeList, "','");
            } else {
                sTypeList=GUIUtils.getComponentStringValue(jComboBoxType);
            }

            List<Object[]> tradeList = (List) DAOCallerAgent.callMethod(TradeAccessor.class,
                    TradeAccessor.GET_TRADES_WITH_FINDER, sTypeList, name);
            model.getDataVector().removeAllElements();
            for (Object[] trade : tradeList) {
                Vector row = new Vector();
                row.add(trade[0]);
                row.add(trade[1]);
                model.addRow(row);
            }
            rowSorter = new TableRowSorter<>(model);
            tradesTable.setModel(model);
            tradesTable.setRowSorter(rowSorter);
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }

    }//GEN-LAST:event_FindButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FindButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JFormattedTextField idTextField;
    private javax.swing.JComboBox jComboBoxType;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldNameLike;
    private javax.swing.JTable tradesTable;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
}
