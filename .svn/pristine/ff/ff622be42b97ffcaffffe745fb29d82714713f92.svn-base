/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 all√©e Paul Barillon
 * - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * jComboBoxIssuer but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.observable;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.referentials.CurrencyAccessor;
import org.gaia.dao.referentials.FrequencyUtil;
import org.gaia.dao.trades.ProductAccessor;
import org.gaia.dao.trades.ProductTypeUtil;
import org.gaia.dao.utils.DateUtils;
import org.gaia.domain.utils.StringUtils;
import org.gaia.domain.trades.Product;
import org.gaia.domain.trades.ProductCurve;
import org.gaia.domain.trades.ProductRate;
import org.gaia.domain.trades.ProductReference;
import org.gaia.domain.trades.Scheduler;
import org.gaia.gui.assets.AssetFinder;
import org.gaia.gui.common.GaiaProductTopComponent;
import org.gaia.gui.common.MenuManager;
import org.gaia.gui.utils.GUIUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays rate index.
 */
@ConvertAsProperties(dtd = "-//org.gaia.gui.observable//RateIndex//EN", autostore = false)
@TopComponent.Description(preferredID = "RateIndexTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.gaia.gui.observable.RateIndexTopComponent")
@ActionReference(path = "Menu"+MenuManager.RateIndexTopComponentMenu , position = MenuManager.RateIndexTopComponent)
@TopComponent.OpenActionRegistration(displayName = "#CTL_RateIndexAction", preferredID = "RateIndexTopComponent")
@Messages({
    "CTL_RateIndexAction=Rate Index",
    "CTL_RateIndexTopComponent=Rate Index",
    "HINT_RateIndexTopComponent=Rate Index"
})
/**
 *
 * @author Jawhar Kamoun
 */
public final class RateIndexTopComponent extends GaiaProductTopComponent {

    private static final Logger logger = Logger.getLogger(RateIndexTopComponent.class);
    private static ArrayList<ProductTypeUtil.ProductType> productTypeList = new ArrayList<>();

    public RateIndexTopComponent() {
        initComponents();
        setName(Bundle.CTL_RateIndexTopComponent());
        setToolTipText(Bundle.HINT_RateIndexTopComponent());
        productTypeList.add(ProductTypeUtil.ProductType.INTEREST_RATE_INDEX);
    }

    @Override
    public void initContext() {
        try {
            List<String> currencies = (List) DAOCallerAgent.callMethod(CurrencyAccessor.class, CurrencyAccessor.LOAD_CURRENCY_CODES);
            GUIUtils.fillCombo(jComboBoxCurrency, currencies);
            /**
             * list of tenors
             */
            List<String> tenors = FrequencyUtil.getTenors();
            GUIUtils.fillComboWithNullFirst(jComboBoxTenor, tenors);

            List<String> frequencies = FrequencyUtil.getFrequencies();
            GUIUtils.fillComboWithNullFirst(compoundingPeriodComboBox, frequencies);
            GUIUtils.fillComboWithNullFirst(averagingPeriodComboBox, frequencies);
            GUIUtils.fillComboWithNullFirst(resetFrequencyComboBox, frequencies);

            List<String> dateRules = (List) DAOCallerAgent.callMethod(DateUtils.class, DateUtils.GET_DATE_RULES);
            GUIUtils.fillComboWithNullFirst(compoundingRuleComboBox, dateRules);
            GUIUtils.fillComboWithNullFirst(averagingRuleComboBox, dateRules);

        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        globaljPanel = new javax.swing.JPanel();
        jComboBoxCurrency = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxTenor = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        jFormattedTextFieldPayLag = new javax.swing.JFormattedTextField(integerFormat);
        jLabel27 = new javax.swing.JLabel();
        jFormattedTextFieldResetLag = new javax.swing.JFormattedTextField(integerFormat);
        jLabel28 = new javax.swing.JLabel();
        jButtonSaveAsNew = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonNew = new javax.swing.JButton();
        jButtonLoad = new javax.swing.JButton();
        jCheckBoxPayBusDays = new javax.swing.JCheckBox();
        jCheckBoxResetBusLag = new javax.swing.JCheckBox();
        jCheckBoxResetInArrears = new javax.swing.JCheckBox();
        jCheckBoxPayInArrears = new javax.swing.JCheckBox();
        jTextFieldId = new javax.swing.JTextField();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new org.jdesktop.swingx.JXLabel();
        jLabel1 = new javax.swing.JLabel();
        compoundingPeriodComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        averagingPeriodComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        resetFrequencyComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        compoundingRuleComboBox = new javax.swing.JComboBox();
        averagingRuleComboBox = new javax.swing.JComboBox();

        globaljPanel.setBackground(new java.awt.Color(254, 252, 254));

        jComboBoxCurrency.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxCurrency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCurrencyActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel4.text")); // NOI18N

        jComboBoxTenor.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxTenor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxTenor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTenorActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel20, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel20.text")); // NOI18N

        jFormattedTextFieldPayLag.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel27, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel27.text")); // NOI18N

        jFormattedTextFieldResetLag.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel28, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel28.text")); // NOI18N

        jButtonSaveAsNew.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSaveAsNew, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jButtonSaveAsNew.text")); // NOI18N
        jButtonSaveAsNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAsNewActionPerformed(evt);
            }
        });

        jButtonSave.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonNew.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonNew, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jButtonNew.text")); // NOI18N
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });

        jButtonLoad.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonLoad, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jButtonLoad.text")); // NOI18N
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });

        jCheckBoxPayBusDays.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxPayBusDays, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jCheckBoxPayBusDays.text")); // NOI18N

        jCheckBoxResetBusLag.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxResetBusLag, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jCheckBoxResetBusLag.text")); // NOI18N

        jCheckBoxResetInArrears.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxResetInArrears, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jCheckBoxResetInArrears.text")); // NOI18N

        jCheckBoxPayInArrears.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxPayInArrears, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jCheckBoxPayInArrears.text")); // NOI18N

        jTextFieldId.setEditable(false);
        jTextFieldId.setText(org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jTextFieldId.text")); // NOI18N

        nameTextField.setText(org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.nameTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.nameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel1.text")); // NOI18N

        compoundingPeriodComboBox.setBackground(new java.awt.Color(255, 255, 255));
        compoundingPeriodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel2.text")); // NOI18N

        averagingPeriodComboBox.setBackground(new java.awt.Color(255, 255, 255));
        averagingPeriodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel3.text")); // NOI18N

        resetFrequencyComboBox.setBackground(new java.awt.Color(255, 255, 255));
        resetFrequencyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(RateIndexTopComponent.class, "RateIndexTopComponent.jLabel6.text")); // NOI18N

        compoundingRuleComboBox.setBackground(new java.awt.Color(255, 255, 255));
        compoundingRuleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));

        averagingRuleComboBox.setBackground(new java.awt.Color(255, 255, 255));
        averagingRuleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));

        javax.swing.GroupLayout globaljPanelLayout = new javax.swing.GroupLayout(globaljPanel);
        globaljPanel.setLayout(globaljPanelLayout);
        globaljPanelLayout.setHorizontalGroup(
            globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(globaljPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(globaljPanelLayout.createSequentialGroup()
                        .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(globaljPanelLayout.createSequentialGroup()
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel28))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFormattedTextFieldResetLag, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jFormattedTextFieldPayLag, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(globaljPanelLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxResetBusLag)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCheckBoxResetInArrears))
                                    .addGroup(globaljPanelLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxPayBusDays)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCheckBoxPayInArrears))
                                    .addComponent(resetFrequencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(globaljPanelLayout.createSequentialGroup()
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jComboBoxCurrency, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBoxTenor, javax.swing.GroupLayout.Alignment.LEADING, 0, 78, Short.MAX_VALUE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(globaljPanelLayout.createSequentialGroup()
                        .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(globaljPanelLayout.createSequentialGroup()
                                .addComponent(jButtonLoad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSaveAsNew)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(globaljPanelLayout.createSequentialGroup()
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(compoundingPeriodComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(averagingPeriodComboBox, 0, 83, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(globaljPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(compoundingRuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(globaljPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(averagingRuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel20)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        globaljPanelLayout.setVerticalGroup(
            globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(globaljPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jComboBoxTenor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(resetFrequencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jFormattedTextFieldPayLag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxPayBusDays)
                    .addComponent(jCheckBoxPayInArrears))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jFormattedTextFieldResetLag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxResetBusLag)
                    .addComponent(jCheckBoxResetInArrears))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(compoundingPeriodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(compoundingRuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(averagingPeriodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(averagingRuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(globaljPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonLoad)
                    .addComponent(jButtonNew)
                    .addComponent(jButtonSaveAsNew)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTextFieldId.setVisible(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(globaljPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(globaljPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCurrencyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCurrencyActionPerformed

    private void jComboBoxTenorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTenorActionPerformed
    }//GEN-LAST:event_jComboBoxTenorActionPerformed

    private void jButtonSaveAsNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAsNewActionPerformed
        /**
         * save as new
         */
        jTextFieldId.setText(StringUtils.EMPTY_STRING);
        setProduct(null);
        fillProduct();
        storeProduct();
    }//GEN-LAST:event_jButtonSaveAsNewActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        /**
         * Save product.
         */
        fillProduct();
        storeProduct();
    }

    public void storeProduct() {
        if (StringUtils.isEmptyString(getProduct().getShortName())) {
            JOptionPane.showMessageDialog(this, "Name must not be empty.");
        } else if (StringUtils.isEmptyString(getProduct().getNotionalCurrency())) {
            JOptionPane.showMessageDialog(this, "Currency must not be empty.");
        } else {
            try {
                setProduct((Product) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.STORE_PRODUCT, getProduct()));
                if (getProduct().getId() != null) {
                    jTextFieldId.setText(getProduct().getId().toString());
                    JOptionPane.showMessageDialog(this, "Saved with id " + getProduct().getId());
                }
            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }

    public void fillProduct() {

        if (getProduct() == null) {
            setProduct(new Product());
        }
        getProduct().setIsAsset(true);
        if (!jTextFieldId.getText().isEmpty()) {
            getProduct().setId(Integer.parseInt(jTextFieldId.getText()));
        }

        try {
            getProduct().setShortName(nameTextField.getText());
            getProduct().setProductType(ProductTypeUtil.ProductType.INTEREST_RATE_INDEX.getName());
            getProduct().setNotionalCurrency(jComboBoxCurrency.getSelectedItem().toString());
            getProduct().setProductReferences(getProductReferences());

            /**
             * product rate
             */
            ProductRate productRate = getProduct().getProductRate();
            if (productRate == null) {
                productRate = new ProductRate();
                productRate.setProduct(getProduct());
                getProduct().setProductRate(productRate);
            }

            /**
             * product curve
             */
            ProductCurve curve = getProduct().getProductCurve();
            if (curve == null) {
                curve = new ProductCurve();
                curve.setProduct(getProduct());
                getProduct().setProductCurve(curve);
            }
            curve.setTenor(GUIUtils.getComponentStringValue(jComboBoxTenor));

            /**
             * scheduler
             */
            Scheduler scheduler = getProduct().getScheduler();
            if (scheduler == null) {
                scheduler = new Scheduler();
                getProduct().setScheduler(scheduler);
            }

            scheduler.setPaymentLag(GUIUtils.getComponentIntegerValue(jFormattedTextFieldPayLag));
            scheduler.setResetLag(GUIUtils.getComponentIntegerValue(jFormattedTextFieldResetLag));
            scheduler.setIsPayInArrears(jCheckBoxPayInArrears.isSelected());
            scheduler.setIsPayLagBusDays(jCheckBoxPayBusDays.isSelected());
            scheduler.setIsResetInArrears(jCheckBoxResetInArrears.isSelected());
            scheduler.setIsResetLagBusDays(jCheckBoxResetBusLag.isSelected());
            if (compoundingPeriodComboBox.getSelectedItem() != null) {
                scheduler.setCompoundFrequency(compoundingPeriodComboBox.getSelectedItem().toString());
                scheduler.setIsCompound(true);
            } else {
                scheduler.setCompoundFrequency(null);
                scheduler.setIsCompound(false);
            }
            if (averagingPeriodComboBox.getSelectedItem() != null) {
                scheduler.setAveragingFrequency(averagingPeriodComboBox.getSelectedItem().toString());
            } else {
                scheduler.setAveragingFrequency(null);
            }
            if (resetFrequencyComboBox.getSelectedItem() != null) {
                scheduler.setFrequency(resetFrequencyComboBox.getSelectedItem().toString());
            } else {
                scheduler.setFrequency(null);
            }
            if (compoundingRuleComboBox.getSelectedItem() != null) {
                scheduler.setCompoundDateRule(compoundingRuleComboBox.getSelectedItem().toString());
            } else {
                scheduler.setCompoundDateRule(null);
            }
            if (averagingRuleComboBox.getSelectedItem() != null) {
                scheduler.setAveragingDateRule(averagingRuleComboBox.getSelectedItem().toString());
            } else {
                scheduler.setAveragingDateRule(null);
            }

        } catch (Exception e) {
            logger.error(StringUtils.formatErrorMessage(e));
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        /**
         * Clear screen
         */
        clearFields(this);

    }//GEN-LAST:event_jButtonNewActionPerformed

    public void load(Integer productId) {
        if (productId != null) {
            try {
                setProduct((Product) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_PRODUCT_BY_ID, productId));
                List<ProductReference> references = (List) DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.GET_PRODUCT_REFERENCES, productId);
                getProduct().setProductReferences(references);
                jTextFieldId.setText(productId.toString());
                nameTextField.setText(getProduct().getShortName());
                jComboBoxCurrency.setSelectedItem(getProduct().getNotionalCurrency());
                if (getProduct().getScheduler() != null) {
                    if (getProduct().getScheduler().getPaymentLag() != null) {
                        jFormattedTextFieldPayLag.setText(getProduct().getScheduler().getPaymentLag().toString());
                    } else {
                        jFormattedTextFieldPayLag.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getScheduler().getResetLag() != null) {
                        jFormattedTextFieldResetLag.setText(getProduct().getScheduler().getResetLag().toString());
                    } else {
                        jFormattedTextFieldResetLag.setText(StringUtils.EMPTY_STRING);
                    }
                    if (getProduct().getScheduler().getIsPayInArrears() != null) {
                        jCheckBoxPayInArrears.setSelected(getProduct().getScheduler().getIsPayInArrears());
                    }
                    if (getProduct().getScheduler().getIsResetInArrears() != null) {
                        jCheckBoxResetInArrears.setSelected(getProduct().getScheduler().getIsResetInArrears());
                    }
                    if (getProduct().getScheduler().getIsPayLagBusDays() != null) {
                        jCheckBoxPayBusDays.setSelected(getProduct().getScheduler().getIsPayLagBusDays());
                    }
                    if (getProduct().getScheduler().getIsResetLagBusDays() != null) {
                        jCheckBoxResetBusLag.setSelected(getProduct().getScheduler().getIsResetLagBusDays());
                    }
                    if (getProduct().getScheduler().getIsPayInArrears() != null) {
                        jCheckBoxPayInArrears.setSelected(getProduct().getScheduler().getIsPayInArrears());
                    }
                    if (getProduct().getScheduler().getIsResetInArrears() != null) {
                        jCheckBoxResetInArrears.setSelected(getProduct().getScheduler().getIsResetInArrears());
                    }
                    if (getProduct().getScheduler().getIsPayLagBusDays() != null) {
                        jCheckBoxPayBusDays.setSelected(getProduct().getScheduler().getIsPayLagBusDays());
                    }
                    if (getProduct().getScheduler().getIsResetLagBusDays() != null) {
                        jCheckBoxResetBusLag.setSelected(getProduct().getScheduler().getIsResetLagBusDays());
                    }
                    if (getProduct().getScheduler().getCompoundFrequency() != null) {
                        compoundingPeriodComboBox.setSelectedItem(getProduct().getScheduler().getCompoundFrequency());
                    } else {
                        compoundingPeriodComboBox.setSelectedItem(null);
                    }
                    if (getProduct().getScheduler().getAveragingFrequency() != null) {
                        averagingPeriodComboBox.setSelectedItem(getProduct().getScheduler().getAveragingFrequency());
                    } else {
                        averagingPeriodComboBox.setSelectedItem(null);
                    }
                    if (getProduct().getScheduler().getFrequency() != null) {
                        resetFrequencyComboBox.setSelectedItem(getProduct().getScheduler().getFrequency());
                    } else {
                        resetFrequencyComboBox.setSelectedItem(null);
                    }
                    if (getProduct().getScheduler().getCompoundDateRule() != null) {
                        compoundingRuleComboBox.setSelectedItem(getProduct().getScheduler().getCompoundDateRule());
                    } else {
                        compoundingRuleComboBox.setSelectedItem(null);
                    }
                    if (getProduct().getScheduler().getAveragingDateRule() != null) {
                        averagingRuleComboBox.setSelectedItem(getProduct().getScheduler().getAveragingDateRule());
                    } else {
                        averagingRuleComboBox.setSelectedItem(null);
                    }

                }
                if (getProduct().getProductCurve() != null) {
                    jComboBoxTenor.setSelectedItem(getProduct().getProductCurve().getTenor());
                } else {
                    jComboBoxTenor.setSelectedItem(null);
                }

                productReferences = new ArrayList();
                for (ProductReference productReference : productReferences) {
                    getProductReferences().add(productReference);
                }
                getProduct().setProductReferences(productReferences);
                setDisplayName(getName() + StringUtils.SPACE + getProduct().getShortName());

            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }
    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
        /**
         * find and load
         */
        AssetFinder assetFinder = new AssetFinder(productTypeList);

        NotifyDescriptor nd = new NotifyDescriptor(assetFinder, "Curve Finder", NotifyDescriptor.OK_CANCEL_OPTION, NotifyDescriptor.PLAIN_MESSAGE,
                null, NotifyDescriptor.OK_OPTION);

        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            Integer curveId = assetFinder.getAssetId();
            load(curveId);
            assetFinder.setVisible(false);

        }

    }//GEN-LAST:event_jButtonLoadActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox averagingPeriodComboBox;
    private javax.swing.JComboBox averagingRuleComboBox;
    private javax.swing.JComboBox compoundingPeriodComboBox;
    private javax.swing.JComboBox compoundingRuleComboBox;
    private javax.swing.JPanel globaljPanel;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveAsNew;
    private javax.swing.JCheckBox jCheckBoxPayBusDays;
    private javax.swing.JCheckBox jCheckBoxPayInArrears;
    private javax.swing.JCheckBox jCheckBoxResetBusLag;
    private javax.swing.JCheckBox jCheckBoxResetInArrears;
    private javax.swing.JComboBox jComboBoxCurrency;
    private javax.swing.JComboBox jComboBoxTenor;
    private javax.swing.JFormattedTextField jFormattedTextFieldPayLag;
    private javax.swing.JFormattedTextField jFormattedTextFieldResetLag;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextFieldId;
    private org.jdesktop.swingx.JXLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JComboBox resetFrequencyComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        initContext();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
