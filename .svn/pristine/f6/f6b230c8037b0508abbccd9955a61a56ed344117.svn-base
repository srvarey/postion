/**
 * Copyright (C) 2013 Gaia Transparence
 * Gaia Transparence, 1 all√©e Paul Barillon - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3.0 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.observable;

import java.util.List;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.observables.MarketDataSourceUtils;
import org.gaia.dao.utils.NumberUtils;
import org.gaia.domain.observables.MarketDataSource;
import org.gaia.domain.utils.StringUtils;
import org.gaia.gui.common.GaiaTopComponent;
import org.gaia.gui.common.MenuManager;
import org.gaia.gui.utils.GUIUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays market data sources.
 */
@ConvertAsProperties(dtd = "-//org.gaia.gui.observable//MarketDataSource//EN", autostore = false)
@TopComponent.Description(preferredID = "MarketDataSourceTopComponent", persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.gaia.gui.observable.MarketDataSourceTopComponent")
@ActionReference(path = "Menu"+MenuManager.MarketDataSourceTopComponentMenu , position = MenuManager.MarketDataSourceTopComponent)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MarketDataSourceAction", preferredID = "MarketDataSourceTopComponent")
@Messages({"CTL_MarketDataSourceAction=Market Data Source", "CTL_MarketDataSourceTopComponent=Market Data Source Window", "HINT_MarketDataSourceTopComponent=This is a Market Data Source window"})
public final class MarketDataSourceTopComponent extends GaiaTopComponent {

    private static final Logger logger = Logger.getLogger(MarketDataSourceTopComponent.class);

    public MarketDataSourceTopComponent() {
        initComponents();
        setName(Bundle.CTL_MarketDataSourceTopComponent());
        setToolTipText(Bundle.HINT_MarketDataSourceTopComponent());
    }

    @Override
    public void initContext() {

        List<String> stringList = (List) DAOCallerAgent.callMethod(MarketDataSourceUtils.class, MarketDataSourceUtils.GET_MARKET_DATA_SOURCES);
        GUIUtils.fillCombo(jComboBoxSourceName, stringList);
        jComboBoxSourceName.addItem(StringUtils.EMPTY_STRING);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBoxSourceName = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldClassName = new javax.swing.JTextField();
        jCheckBoxIsRealTime = new javax.swing.JCheckBox();
        jButtonSave = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldServerName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldServerPort = new javax.swing.JTextField();
        jButtonDelete = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(254, 252, 254));

        jComboBoxSourceName.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxSourceName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        jComboBoxSourceName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSourceNameActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jLabel2.text")); // NOI18N

        jTextFieldClassName.setText(org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jTextFieldClassName.text")); // NOI18N

        jCheckBoxIsRealTime.setBackground(new java.awt.Color(254, 252, 254));
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxIsRealTime, org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jCheckBoxIsRealTime.text")); // NOI18N

        jButtonSave.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jLabel5.text")); // NOI18N

        jTextFieldServerName.setText(org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jTextFieldServerName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jLabel6.text")); // NOI18N

        jTextFieldServerPort.setText(org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jTextFieldServerPort.text")); // NOI18N

        jButtonDelete.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDelete, org.openide.util.NbBundle.getMessage(MarketDataSourceTopComponent.class, "MarketDataSourceTopComponent.jButtonDelete.text")); // NOI18N
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDelete))
                    .addComponent(jCheckBoxIsRealTime)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBoxSourceName, 0, 237, Short.MAX_VALUE)
                                .addComponent(jTextFieldServerName)
                                .addComponent(jTextFieldServerPort))
                            .addComponent(jTextFieldClassName, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSourceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldClassName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxIsRealTime)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonDelete))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

        String name = GUIUtils.getComponentStringValue(jComboBoxSourceName);

        name = (String) JOptionPane.showInputDialog(this, "Label of the Data Source", "Market Data Source",
                JOptionPane.PLAIN_MESSAGE, null, null, name);

        if (!StringUtils.isEmptyString(name)) {
            String className = jTextFieldClassName.getText();
            String serverName = jTextFieldServerName.getText();
            String portNum = jTextFieldServerPort.getText();

            if (StringUtils.isEmptyString(className)) {
                JOptionPane.showMessageDialog(this, "Class Name is empty ", "Warning", JOptionPane.OK_OPTION);
                return;
            } else if (StringUtils.isEmptyString(serverName)) {
                JOptionPane.showMessageDialog(this, "Server Name is empty ", "Warning", JOptionPane.OK_OPTION);
                return;
            } else if (StringUtils.isEmptyString(portNum) || !NumberUtils.isInteger(portNum)) {
                JOptionPane.showMessageDialog(this, "Server Port is empty or not an integer", "Warning", JOptionPane.OK_OPTION);
                return;
            }
            MarketDataSource marketDataSource = (MarketDataSource) DAOCallerAgent.callMethod(MarketDataSourceUtils.class,
                    MarketDataSourceUtils.GET_MARKET_DATA_SOURCE_BY_NAME, name);

            if (marketDataSource == null) {
                marketDataSource = new MarketDataSource();
                jComboBoxSourceName.addItem(name);
                marketDataSource.setMarketDataSourceName(name);
            }
            marketDataSource.setClassName(className);
            marketDataSource.setIsRealTime(jCheckBoxIsRealTime.isSelected());

            marketDataSource.setServerHost(serverName);
            Integer port = null;
            try {
                port = Integer.parseInt(portNum);
            } catch (NumberFormatException e) {
                logger.error(e.getMessage());
            }
            marketDataSource.setServerPort(port);

            DAOCallerAgent.callMethod(MarketDataSourceUtils.class,
                    MarketDataSourceUtils.STORE_MARKET_DATA_SOURCE, marketDataSource);

            jComboBoxSourceName.setSelectedItem(name);
            JOptionPane.showMessageDialog(this, "Saved");
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /**
     * display Market data
     *
     * @param evt
     */
    private void jComboBoxSourceNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSourceNameActionPerformed
        String name = null;
        if (jComboBoxSourceName.getSelectedItem() != null) {
            name = jComboBoxSourceName.getSelectedItem().toString();
        }

        MarketDataSource marketDataSource = (MarketDataSource) DAOCallerAgent.callMethod(MarketDataSourceUtils.class,
                MarketDataSourceUtils.GET_MARKET_DATA_SOURCE_BY_NAME, name);

        if (marketDataSource != null) {
            jTextFieldClassName.setText(marketDataSource.getClassName());

            jTextFieldServerName.setText(marketDataSource.getServerHost());
            if (marketDataSource.getServerPort() != null) {
                jTextFieldServerPort.setText(marketDataSource.getServerPort().toString());
            } else {
                jTextFieldServerPort.setText(null);
            }
            jCheckBoxIsRealTime.setSelected(marketDataSource.isRealTime());
        } else {

            jTextFieldClassName.setText(StringUtils.EMPTY_STRING);
            jTextFieldServerName.setText(StringUtils.EMPTY_STRING);
            jTextFieldServerPort.setText(StringUtils.EMPTY_STRING);
        }
    }//GEN-LAST:event_jComboBoxSourceNameActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        String name;
        if (jComboBoxSourceName.getSelectedItem() != null) {
            name = jComboBoxSourceName.getSelectedItem().toString();
            int confirmation = JOptionPane.showConfirmDialog(this, "Delete market data source " + name + " ?", "Delete Confirmation", JOptionPane.OK_CANCEL_OPTION);
            if (JOptionPane.OK_OPTION == confirmation) {
                MarketDataSource marketDataSource = (MarketDataSource) DAOCallerAgent.callMethod(MarketDataSourceUtils.class,
                        MarketDataSourceUtils.GET_MARKET_DATA_SOURCE_BY_NAME, name);

                if (marketDataSource != null) {
                    DAOCallerAgent.callMethod(MarketDataSourceUtils.class,
                            MarketDataSourceUtils.DELETE_MARKET_DATA_SOURCE, marketDataSource);
                    jComboBoxSourceName.removeItem(name);
                    clearFields(this);
                    if (jComboBoxSourceName.getItemCount() > 0) {
                        jComboBoxSourceName.setSelectedIndex(0);
                    }
                }
            }

        }

    }//GEN-LAST:event_jButtonDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxIsRealTime;
    private javax.swing.JComboBox jComboBoxSourceName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldClassName;
    private javax.swing.JTextField jTextFieldServerName;
    private javax.swing.JTextField jTextFieldServerPort;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        initContext();
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {

        p.setProperty("version", "1.0");

    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");

    }
}
