/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 all√©e Paul Barillon
 * - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.gaia.gui.admin;

import java.awt.HeadlessException;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.reports.PositionBuilder;
import org.gaia.dao.trades.FlowAccessor;
import org.gaia.dao.trades.ProductAccessor;
import org.gaia.dao.trades.TradeAccessor;
import org.gaia.domain.utils.StringUtils;
import org.gaia.domain.trades.Trade;
import org.gaia.domain.trades.TradeGroup;
import org.gaia.gui.common.GaiaTopComponent;
import org.gaia.gui.common.MenuManager;
import org.gaia.gui.utils.GUIUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays admin commands.
 */
@ConvertAsProperties(dtd = "-//org.gaia.gui.admin//Admin//EN", autostore = false)
@TopComponent.Description(preferredID = "AdminTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "rightSlidingSlide", openAtStartup = false)
@ActionID(category = "Window", id = "org.gaia.gui.admin.AdminTopComponent")
@ActionReference(path = "Menu"+MenuManager.AdminTopComponentMenu , position=MenuManager.AdminTopComponent)
@TopComponent.OpenActionRegistration(displayName = "#CTL_AdminAction", preferredID = "AdminTopComponent")
@Messages({"CTL_AdminAction=Admin", "CTL_AdminTopComponent=Admin", "HINT_AdminTopComponent=This is a Admin window"})

public final class AdminTopComponent extends GaiaTopComponent {

    private static final Logger logger = Logger.getLogger(AdminTopComponent.class);

    public AdminTopComponent() {
        initComponents();
        setName(Bundle.CTL_AdminTopComponent());
        setToolTipText(Bundle.HINT_AdminTopComponent());

        List<String> status=(List)DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.GET_LIFECYCLE_STATUS_LIST);
        GUIUtils.fillComboWithNullFirst(lifeCycleStatusComboBox, status);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldTradeId1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldTradeId = new javax.swing.JTextField();
        jTextFieldProductId = new javax.swing.JTextField();
        jButtonDeleteTrade = new javax.swing.JButton();
        jButtonDeleteProduct = new javax.swing.JButton();
        jButtonRegenerateFlows = new javax.swing.JButton();
        jButtonregenerateAllPrincipalFlows = new javax.swing.JButton();
        jButtonRegenerateAllScheduleFlows = new javax.swing.JButton();
        jTextFieldPositionId = new javax.swing.JTextField();
        jButtonCalculatePosition = new javax.swing.JButton();
        jButtonDeletePosition = new javax.swing.JButton();
        deletePortfoliosPositionsButton = new javax.swing.JButton();
        lifeCycleStatusComboBox = new javax.swing.JComboBox();
        jTextFieldTradeId2 = new javax.swing.JTextField();
        jButtonDeleteTrade1 = new javax.swing.JButton();
        jTextFieldTradeId3 = new javax.swing.JTextField();
        jButtonDeleteTrade2 = new javax.swing.JButton();

        jTextFieldTradeId1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTradeId1.setName("jTextFieldTradeId"); // NOI18N

        setBackground(new java.awt.Color(195, 229, 255));

        jPanel2.setBackground(new java.awt.Color(254, 252, 254));

        jTextFieldTradeId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTradeId.setName("jTextFieldTradeId"); // NOI18N

        jTextFieldProductId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldProductId.setName("jTextFieldProductId"); // NOI18N

        jButtonDeleteTrade.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDeleteTrade, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonDeleteTrade.text")); // NOI18N
        jButtonDeleteTrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteTradeActionPerformed(evt);
            }
        });

        jButtonDeleteProduct.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDeleteProduct, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonDeleteProduct.text")); // NOI18N
        jButtonDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteProductActionPerformed(evt);
            }
        });

        jButtonRegenerateFlows.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonRegenerateFlows, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonRegenerateFlows.text")); // NOI18N
        jButtonRegenerateFlows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegenerateFlowsActionPerformed(evt);
            }
        });

        jButtonregenerateAllPrincipalFlows.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonregenerateAllPrincipalFlows, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonregenerateAllPrincipalFlows.text")); // NOI18N
        jButtonregenerateAllPrincipalFlows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonregenerateAllPrincipalFlowsActionPerformed(evt);
            }
        });

        jButtonRegenerateAllScheduleFlows.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonRegenerateAllScheduleFlows, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonRegenerateAllScheduleFlows.text")); // NOI18N
        jButtonRegenerateAllScheduleFlows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegenerateAllScheduleFlowsActionPerformed(evt);
            }
        });

        jTextFieldPositionId.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPositionId.setText(org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jTextFieldPositionId.text")); // NOI18N
        jTextFieldPositionId.setName("jTextFieldPositionId"); // NOI18N
        jTextFieldPositionId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPositionIdActionPerformed(evt);
            }
        });

        jButtonCalculatePosition.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonCalculatePosition, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonCalculatePosition.text")); // NOI18N
        jButtonCalculatePosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculatePositionActionPerformed(evt);
            }
        });

        jButtonDeletePosition.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDeletePosition, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonDeletePosition.text")); // NOI18N
        jButtonDeletePosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeletePositionActionPerformed(evt);
            }
        });

        deletePortfoliosPositionsButton.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(deletePortfoliosPositionsButton, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.deletePortfoliosPositionsButton.text")); // NOI18N
        deletePortfoliosPositionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePortfoliosPositionsButtonActionPerformed(evt);
            }
        });

        lifeCycleStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));

        jTextFieldTradeId2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTradeId2.setName("jTextFieldTradeId"); // NOI18N

        jButtonDeleteTrade1.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDeleteTrade1, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonDeleteTrade1.text")); // NOI18N
        jButtonDeleteTrade1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteTrade1ActionPerformed(evt);
            }
        });

        jTextFieldTradeId3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTradeId3.setName("jTextFieldTradeId"); // NOI18N

        jButtonDeleteTrade2.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDeleteTrade2, org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jButtonDeleteTrade2.text")); // NOI18N
        jButtonDeleteTrade2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteTrade2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonregenerateAllPrincipalFlows)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRegenerateAllScheduleFlows))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldPositionId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldTradeId)
                            .addComponent(jTextFieldProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldTradeId2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldTradeId3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonCalculatePosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonDeleteTrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonDeleteProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonRegenerateFlows)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jButtonDeletePosition, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deletePortfoliosPositionsButton))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lifeCycleStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDeleteTrade1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(161, 161, 161))
                            .addComponent(jButtonDeleteTrade2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTradeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteTrade)
                    .addComponent(jButtonRegenerateFlows))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldProductId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPositionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCalculatePosition)
                    .addComponent(jButtonDeletePosition)
                    .addComponent(deletePortfoliosPositionsButton))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lifeCycleStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTradeId2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteTrade1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTradeId3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDeleteTrade2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonregenerateAllPrincipalFlows)
                    .addComponent(jButtonRegenerateAllScheduleFlows))
                .addGap(57, 57, 57))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AdminTopComponent.class, "AdminTopComponent.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDeleteTradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteTradeActionPerformed
        String sId = jTextFieldTradeId.getText();
        if (!sId.isEmpty()) {
            try {
                DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.DELETE_TRADE, Integer.parseInt(sId));
                JOptionPane.showMessageDialog(this, "Done");
            } catch (NumberFormatException | HeadlessException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_jButtonDeleteTradeActionPerformed

    private void jButtonDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteProductActionPerformed
        String sId = jTextFieldProductId.getText();
        if (!sId.isEmpty()) {
            try {
                DAOCallerAgent.callMethod(ProductAccessor.class, ProductAccessor.DELETE_PRODUCT_BY_ID, Integer.parseInt(sId));
                JOptionPane.showMessageDialog(this, "Done");
            } catch (NumberFormatException | HeadlessException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_jButtonDeleteProductActionPerformed

    private void jButtonRegenerateFlowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegenerateFlowsActionPerformed
        String sId = jTextFieldTradeId.getText();
        if (!sId.isEmpty()) {
            try {
                Trade trade = (Trade) DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.GET_TRADE_BY_ID, Integer.parseInt(sId));
                if (trade != null) {
                    // simulate a creation
                    DAOCallerAgent.callAsynchroneMethod(TradeAccessor.class, TradeAccessor.GENERATE_IMPACTS, trade, null);
                    JOptionPane.showMessageDialog(this, "Done");
                } else {
                    JOptionPane.showMessageDialog(this, "Not found");
                }

            } catch (NumberFormatException | HeadlessException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_jButtonRegenerateFlowsActionPerformed

    private void jButtonregenerateAllPrincipalFlowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonregenerateAllPrincipalFlowsActionPerformed
        try {
            int ret = JOptionPane.showConfirmDialog(this, "Sure?", "Generate all principal flows", JOptionPane.OK_CANCEL_OPTION);
            if (ret == JOptionPane.OK_OPTION) {
                DAOCallerAgent.callMethod(FlowAccessor.class, FlowAccessor.GENERATE_ALL_PRINCIPAL_FLOWS);
                JOptionPane.showMessageDialog(this, "Done");
            }
        } catch (HeadlessException ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }//GEN-LAST:event_jButtonregenerateAllPrincipalFlowsActionPerformed

    private void jButtonRegenerateAllScheduleFlowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegenerateAllScheduleFlowsActionPerformed
        try {
            int ret = JOptionPane.showConfirmDialog(this, "Sure?", "Generate all schedule flows", JOptionPane.OK_CANCEL_OPTION);
            if (ret == JOptionPane.OK_OPTION) {
                DAOCallerAgent.callMethod(FlowAccessor.class, FlowAccessor.GENERATE_AND_STORE_ALL_SCHEDULE_FLOWS);
                JOptionPane.showMessageDialog(this, "Done");
            }
        } catch (HeadlessException ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
    }//GEN-LAST:event_jButtonRegenerateAllScheduleFlowsActionPerformed

    private void jButtonCalculatePositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculatePositionActionPerformed
        String sId = jTextFieldPositionId.getText();
        if (!sId.isEmpty()) {
            try {
                DAOCallerAgent.callMethod(PositionBuilder.class, PositionBuilder.RECALCULATE_POSITION, Integer.parseInt(sId));
                JOptionPane.showMessageDialog(this, "Done");
            } catch (NumberFormatException | HeadlessException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_jButtonCalculatePositionActionPerformed

    private void jButtonTesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTesterActionPerformed
    }//GEN-LAST:event_jButtonTesterActionPerformed

    private void jButtonDeletePositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeletePositionActionPerformed
        String sId = jTextFieldPositionId.getText();
        if (!sId.isEmpty()) {
            try {
                DAOCallerAgent.callMethod(PositionBuilder.class, PositionBuilder.DELETE_POSITION, Integer.parseInt(sId));
            } catch (NumberFormatException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_jButtonDeletePositionActionPerformed

    private void jTextFieldPositionIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPositionIdActionPerformed

    }//GEN-LAST:event_jTextFieldPositionIdActionPerformed

    private void deletePortfoliosPositionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePortfoliosPositionsButtonActionPerformed
        String sId = jTextFieldPositionId.getText();
        if (!sId.isEmpty()) {
            try {
                DAOCallerAgent.callMethod(PositionBuilder.class, PositionBuilder.DELETE_PORTFOLIOS_POSITIONS, Integer.parseInt(sId));
            } catch (NumberFormatException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_deletePortfoliosPositionsButtonActionPerformed

    private void jButtonDeleteTrade1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteTrade1ActionPerformed
        String sId = jTextFieldTradeId2.getText();
        if (!sId.isEmpty()&& lifeCycleStatusComboBox.getSelectedItem()!=null) {
            try {
                Trade trade = (Trade)DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.GET_TRADE_BY_ID, Integer.parseInt(sId));
                if (!lifeCycleStatusComboBox.getSelectedItem().toString().isEmpty()){
                    trade.setLifeCycleStatus(lifeCycleStatusComboBox.getSelectedItem().toString());
                    DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.STORE_TRADE,trade);
                    JOptionPane.showMessageDialog(this, "Done");
                }
            } catch (NumberFormatException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_jButtonDeleteTrade1ActionPerformed

    private void jButtonDeleteTrade2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteTrade2ActionPerformed
         String sId = jTextFieldTradeId3.getText();
        if (!sId.isEmpty()) {
            try {
                TradeGroup group = (TradeGroup)DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.GET_TRADE_GROUP, Integer.parseInt(sId));
                if (group.getTrades()!=null && group.getTrades().size()>0){
                    JOptionPane.showMessageDialog(this, "Please delete trades first");
                } else {
                    DAOCallerAgent.callMethod(TradeAccessor.class, TradeAccessor.DELETE_TRADE_GROUP,group);
                    JOptionPane.showMessageDialog(this, "Done");
                }
            } catch (NumberFormatException ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
    }//GEN-LAST:event_jButtonDeleteTrade2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deletePortfoliosPositionsButton;
    private javax.swing.JButton jButtonCalculatePosition;
    private javax.swing.JButton jButtonDeletePosition;
    private javax.swing.JButton jButtonDeleteProduct;
    private javax.swing.JButton jButtonDeleteTrade;
    private javax.swing.JButton jButtonDeleteTrade1;
    private javax.swing.JButton jButtonDeleteTrade2;
    private javax.swing.JButton jButtonRegenerateAllScheduleFlows;
    private javax.swing.JButton jButtonRegenerateFlows;
    private javax.swing.JButton jButtonregenerateAllPrincipalFlows;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextFieldPositionId;
    private javax.swing.JTextField jTextFieldProductId;
    private javax.swing.JTextField jTextFieldTradeId;
    private javax.swing.JTextField jTextFieldTradeId1;
    private javax.swing.JTextField jTextFieldTradeId2;
    private javax.swing.JTextField jTextFieldTradeId3;
    private javax.swing.JComboBox lifeCycleStatusComboBox;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
