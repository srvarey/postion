package org.gaia.gui.admin;

/**
 * Copyright (C) 2013 Gaia Transparence Gaia Transparence, 1 all√©e Paul Barillon
 * - 94300 VINCENNES
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.gaia.dao.jade.DAOCallerAgent;
import org.gaia.dao.utils.MappingsAccessor;
import org.gaia.domain.utils.StringUtils;
import org.gaia.domain.utils.Mapping;
import org.gaia.gui.common.MenuManager;
import org.gaia.gui.utils.GUIUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays mappings.
 */
@ConvertAsProperties(dtd = "-//org.gaia.gui.admin//Mapping//EN", autostore = false)
@TopComponent.Description(preferredID = "MappingTopComponent",iconBase = "org/gaia/gui/admin/mapping.png", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.gaia.gui.admin.MappingTopComponent")
@ActionReference(path = "Menu"+MenuManager.MappingTopComponentMenu , position = MenuManager.MappingTopComponent)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MappingAction", preferredID = "MappingTopComponent")
@Messages({"CTL_MappingAction=Mapping", "CTL_MappingTopComponent=Mapping", "HINT_MappingTopComponent=Mapping"})
public final class MappingTopComponent extends TopComponent {

    private ArrayList<Mapping> mappings;
    private ArrayList<Mapping> removed;
    private static final Logger logger = Logger.getLogger(MappingTopComponent.class);

    public MappingTopComponent() {
        initComponents();
        setName(Bundle.CTL_MappingTopComponent());
        setToolTipText(Bundle.HINT_MappingTopComponent());

        List<String> list;
        try {
            list = (List<String>) DAOCallerAgent.callMethod(MappingsAccessor.class, MappingsAccessor.GET_MAPPING_NAME_LIST);
            GUIUtils.fillComboWithNullFirst(jComboBoxMappings, list);
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
        removed = new ArrayList();

        jTableMappings.getTableHeader().setReorderingAllowed(false);
    }
    public void initContext(){

        List<String> list;
        try {
            list = (List<String>) DAOCallerAgent.callMethod(MappingsAccessor.class, MappingsAccessor.GET_MAPPING_NAME_LIST);
            GUIUtils.fillComboWithNullFirst(jComboBoxMappings, list);
        } catch (Exception ex) {
            logger.error(StringUtils.formatErrorMessage(ex));
        }
        removed = new ArrayList();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMappings = new javax.swing.JTable();
        jComboBoxMappings = new javax.swing.JComboBox();
        jButtonSave = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(254, 252, 254));

        jButtonAdd.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonAdd, org.openide.util.NbBundle.getMessage(MappingTopComponent.class, "MappingTopComponent.jButtonAdd.text")); // NOI18N
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonRemove, org.openide.util.NbBundle.getMessage(MappingTopComponent.class, "MappingTopComponent.jButtonRemove.text")); // NOI18N
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jTableMappings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Key",  "Value"
            }
        ));
        jTableMappings.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTableMappings);

        jComboBoxMappings.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxMappings.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBoxMappings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMappingsActionPerformed(evt);
            }
        });

        jButtonSave.setBackground(new java.awt.Color(195, 229, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSave, org.openide.util.NbBundle.getMessage(MappingTopComponent.class, "MappingTopComponent.jButtonSave.text")); // NOI18N
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxMappings, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonRemove)
                            .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxMappings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonRemove))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        /**
         * add
         */
        ((DefaultTableModel) jTableMappings.getModel()).addRow(new Object[2]);
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        /**
         * remove
         */
        if (jTableMappings.getSelectedRow() >= 0) {
            int index = jTableMappings.getSelectedRow();
            if (mappings != null && mappings.size() > index && mappings.get(index) != null) {
                Mapping selected = mappings.get(jTableMappings.getSelectedRow());
                removed.add(selected);
                mappings.remove(selected);
            }
            ((DefaultTableModel) jTableMappings.getModel()).removeRow(jTableMappings.getSelectedRow());
        }
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jComboBoxMappingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMappingsActionPerformed
        /**
         * load
         */
        DefaultTableModel tableModel = (DefaultTableModel) jTableMappings.getModel();
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
        if (jComboBoxMappings.getSelectedItem() != null) {
            try {
                mappings = (ArrayList) DAOCallerAgent.callMethod(MappingsAccessor.class, MappingsAccessor.GET_MAPPINGS_BY_NAME, jComboBoxMappings.getSelectedItem().toString());
                for (Mapping m : mappings) {
                    Object[] row = {m.getKey1(), m.getValue()};
                    tableModel.addRow(row);
                }
                jTableMappings.setModel(tableModel);
            } catch (Exception ex) {
                logger.error(StringUtils.formatErrorMessage(ex));
            }
        }
        removed = new ArrayList();
    }//GEN-LAST:event_jComboBoxMappingsActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        String mappingName = GUIUtils.getComponentStringValue(jComboBoxMappings);
        if (mappingName == null) {
            mappingName = (String) JOptionPane.showInputDialog(this, "Mapping name", "Mapping name", JOptionPane.PLAIN_MESSAGE, null, null, "New Mapping");
        }
        if (jComboBoxMappings.getSelectedItem() != null) {
            for (int i = 0; i < jTableMappings.getRowCount(); i++) {
                if (jComboBoxMappings.getSelectedItem() != null) {
                    String key = GUIUtils.getTableValueAt(jTableMappings, i, 0);
                    String value = GUIUtils.getTableValueAt(jTableMappings, i, 1);
                    Mapping mapping = null;
                    try {
                        mapping = (Mapping) DAOCallerAgent.callMethod(MappingsAccessor.class, MappingsAccessor.GET_MAPPING_BY_NAME_AND_KEY, mappingName, key);
                    } catch (Exception ex) {
                        logger.error(StringUtils.formatErrorMessage(ex));
                    }
                    if (mapping == null) {
                        mapping = new Mapping();
                    }
                    mapping.setKey1(key);
                    mapping.setValue(value);
                    mapping.setMappingName(mappingName);
                    try {
                        DAOCallerAgent.callMethod(MappingsAccessor.class, MappingsAccessor.STORE_MAPPING, mapping);
                    } catch (Exception ex) {
                        logger.error(StringUtils.formatErrorMessage(ex));
                    }
                }
            }
            for (Mapping mapping : removed) {
                try {
                    DAOCallerAgent.callMethod(MappingsAccessor.class, MappingsAccessor.DELETE_MAPPING, mapping);
                } catch (Exception ex) {
                    logger.error(StringUtils.formatErrorMessage(ex));
                }
            }
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxMappings;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMappings;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
      initContext();
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {

        p.setProperty("version", "1.0");

    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");

    }
}
